// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   ml7715@EEWS104A-021
//  Generated date: Wed Apr 27 15:26:23 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    mouse_new_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module mouse_new_core_fsm (
  clk, en, arst_n, fsm_output
);
  input clk;
  input en;
  input arst_n;
  output [3:0] fsm_output;
  reg [3:0] fsm_output;


  // FSM State Type Declaration for mouse_new_core_fsm_1
  parameter
    st_main = 2'd0,
    st_main_1 = 2'd1,
    st_main_2 = 2'd2,
    st_main_3 = 2'd3,
    state_x = 2'b00;

  reg [1:0] state_var;
  reg [1:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : mouse_new_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 4'b1;
        state_var_NS = st_main_1;
      end
      st_main_1 : begin
        fsm_output = 4'b10;
        state_var_NS = st_main_2;
      end
      st_main_2 : begin
        fsm_output = 4'b100;
        state_var_NS = st_main_3;
      end
      st_main_3 : begin
        fsm_output = 4'b1000;
        state_var_NS = st_main;
      end
      default : begin
        fsm_output = 4'b0000;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= st_main;
    end
    else if ( en ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    mouse_new_core
// ------------------------------------------------------------------


module mouse_new_core (
  clk, en, arst_n, vga_xy_rsc_mgc_in_wire_d, mouse_xy_rsc_mgc_in_wire_d, clk_en_rsc_mgc_out_stdreg_d,
      video_in_rsc_mgc_in_wire_d, video_out_rsc_mgc_out_stdreg_d, cursor_size_rsc_8_0_mgc_in_wire_d
);
  input clk;
  input en;
  input arst_n;
  input [19:0] vga_xy_rsc_mgc_in_wire_d;
  input [19:0] mouse_xy_rsc_mgc_in_wire_d;
  output clk_en_rsc_mgc_out_stdreg_d;
  reg clk_en_rsc_mgc_out_stdreg_d;
  input [29:0] video_in_rsc_mgc_in_wire_d;
  output [29:0] video_out_rsc_mgc_out_stdreg_d;
  input [7:0] cursor_size_rsc_8_0_mgc_in_wire_d;


  // Interconnect Declarations
  wire [3:0] fsm_output;
  wire and_dcpl;
  reg land_3_lpi_dfm;
  reg [9:0] mux_itm;
  reg [9:0] mux_1_itm;
  wire or_2_cse;
  wire [11:0] main_1_if_acc_5;
  wire [12:0] nl_main_1_if_acc_5;
  wire [11:0] main_1_if_acc_7;
  wire [12:0] nl_main_1_if_acc_7;
  wire [11:0] main_1_if_acc_9;
  wire [12:0] nl_main_1_if_acc_9;
  wire [11:0] main_1_if_acc_11;
  wire [12:0] nl_main_1_if_acc_11;
  reg [9:0] reg_io_read_video_in_rsc_d_cse_sva_tmp_20;
  reg [9:0] reg_video_out_rsc_mgc_out_stdreg_d_tmp;
  reg [9:0] reg_video_out_rsc_mgc_out_stdreg_d_tmp_1;
  reg [9:0] reg_video_out_rsc_mgc_out_stdreg_d_tmp_2;
  wire [9:0] mouse_y_1_sva;
  wire [10:0] nl_mouse_y_1_sva;


  // Interconnect Declarations for Component Instantiations 
  mouse_new_core_fsm mouse_new_core_fsm_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .fsm_output(fsm_output)
    );
  assign video_out_rsc_mgc_out_stdreg_d = {reg_video_out_rsc_mgc_out_stdreg_d_tmp
      , reg_video_out_rsc_mgc_out_stdreg_d_tmp_1 , reg_video_out_rsc_mgc_out_stdreg_d_tmp_2};
  assign nl_mouse_y_1_sva = (~ (mouse_xy_rsc_mgc_in_wire_d[19:10])) + 10'b1;
  assign mouse_y_1_sva = nl_mouse_y_1_sva[9:0];
  assign nl_main_1_if_acc_5 = conv_u2u_11_12(readslicef_12_11_1((conv_u2u_11_12({mouse_y_1_sva
      , 1'b1}) + conv_u2u_11_12({(~ (vga_xy_rsc_mgc_in_wire_d[19:10])) , 1'b1}))))
      + conv_s2u_11_12({3'b100 , cursor_size_rsc_8_0_mgc_in_wire_d});
  assign main_1_if_acc_5 = nl_main_1_if_acc_5[11:0];
  assign nl_main_1_if_acc_7 = conv_u2u_11_12(readslicef_12_11_1((conv_u2u_11_12({(vga_xy_rsc_mgc_in_wire_d[19:10])
      , 1'b1}) + conv_u2u_11_12({(~ mouse_y_1_sva) , 1'b1})))) + conv_s2u_11_12({3'b100
      , cursor_size_rsc_8_0_mgc_in_wire_d});
  assign main_1_if_acc_7 = nl_main_1_if_acc_7[11:0];
  assign nl_main_1_if_acc_9 = conv_u2u_11_12(readslicef_12_11_1((conv_u2u_11_12({(mouse_xy_rsc_mgc_in_wire_d[9:0])
      , 1'b1}) + conv_u2u_11_12({(~ (vga_xy_rsc_mgc_in_wire_d[9:0])) , 1'b1}))))
      + conv_s2u_11_12({3'b100 , cursor_size_rsc_8_0_mgc_in_wire_d});
  assign main_1_if_acc_9 = nl_main_1_if_acc_9[11:0];
  assign nl_main_1_if_acc_11 = conv_u2u_11_12(readslicef_12_11_1((conv_u2u_11_12({(vga_xy_rsc_mgc_in_wire_d[9:0])
      , 1'b1}) + conv_u2u_11_12({(~ (mouse_xy_rsc_mgc_in_wire_d[9:0])) , 1'b1}))))
      + conv_s2u_11_12({3'b100 , cursor_size_rsc_8_0_mgc_in_wire_d});
  assign main_1_if_acc_11 = nl_main_1_if_acc_11[11:0];
  assign or_2_cse = (main_1_if_acc_11[11]) | (main_1_if_acc_9[11]) | (main_1_if_acc_7[11])
      | (main_1_if_acc_5[11]);
  assign and_dcpl = ~((fsm_output[1]) | (fsm_output[2]));
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      mux_itm <= 10'b0;
      mux_1_itm <= 10'b0;
      land_3_lpi_dfm <= 1'b0;
      clk_en_rsc_mgc_out_stdreg_d <= 1'b0;
      reg_io_read_video_in_rsc_d_cse_sva_tmp_20 <= 10'b0;
      reg_video_out_rsc_mgc_out_stdreg_d_tmp <= 10'b0;
      reg_video_out_rsc_mgc_out_stdreg_d_tmp_1 <= 10'b0;
      reg_video_out_rsc_mgc_out_stdreg_d_tmp_2 <= 10'b0;
    end
    else begin
      if ( en ) begin
        mux_itm <= MUX_v_10_2_2({10'b110010000 , (video_in_rsc_mgc_in_wire_d[29:20])},
            or_2_cse);
        mux_1_itm <= MUX_v_10_2_2({10'b1100100000 , (video_in_rsc_mgc_in_wire_d[19:10])},
            or_2_cse);
        land_3_lpi_dfm <= ~((main_1_if_acc_5[11]) | (main_1_if_acc_7[11]) | (main_1_if_acc_9[11])
            | (main_1_if_acc_11[11]));
        clk_en_rsc_mgc_out_stdreg_d <= MUX_s_1_2_2({land_3_lpi_dfm , clk_en_rsc_mgc_out_stdreg_d},
            and_dcpl);
        reg_io_read_video_in_rsc_d_cse_sva_tmp_20 <= video_in_rsc_mgc_in_wire_d[9:0];
        reg_video_out_rsc_mgc_out_stdreg_d_tmp <= MUX_v_10_2_2({mux_itm , (video_out_rsc_mgc_out_stdreg_d[29:20])},
            and_dcpl);
        reg_video_out_rsc_mgc_out_stdreg_d_tmp_1 <= MUX_v_10_2_2({mux_1_itm , (video_out_rsc_mgc_out_stdreg_d[19:10])},
            and_dcpl);
        reg_video_out_rsc_mgc_out_stdreg_d_tmp_2 <= MUX_v_10_2_2({reg_io_read_video_in_rsc_d_cse_sva_tmp_20
            , (video_out_rsc_mgc_out_stdreg_d[9:0])}, and_dcpl);
      end
    end
  end

  function [10:0] readslicef_12_11_1;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_12_11_1 = tmp[10:0];
  end
  endfunction


  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function  [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function  [11:0] conv_s2u_11_12 ;
    input signed [10:0]  vector ;
  begin
    conv_s2u_11_12 = {vector[10], vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    mouse_new
//  Generated from file(s):
//    2) $PROJECT_HOME/New_mouse/vga_mouse_square.c
// ------------------------------------------------------------------


module mouse_new (
  vga_xy_rsc_z, mouse_xy_rsc_z, cursor_size_rsc_8_0_z, clk_en_rsc_z, video_in_rsc_z,
      video_out_rsc_z, clk, en, arst_n
);
  input [19:0] vga_xy_rsc_z;
  input [19:0] mouse_xy_rsc_z;
  input [7:0] cursor_size_rsc_8_0_z;
  output clk_en_rsc_z;
  input [29:0] video_in_rsc_z;
  output [29:0] video_out_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [19:0] vga_xy_rsc_mgc_in_wire_d;
  wire [19:0] mouse_xy_rsc_mgc_in_wire_d;
  wire clk_en_rsc_mgc_out_stdreg_d;
  wire [29:0] video_in_rsc_mgc_in_wire_d;
  wire [29:0] video_out_rsc_mgc_out_stdreg_d;
  wire [7:0] cursor_size_rsc_8_0_mgc_in_wire_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(20)) vga_xy_rsc_mgc_in_wire (
      .d(vga_xy_rsc_mgc_in_wire_d),
      .z(vga_xy_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(20)) mouse_xy_rsc_mgc_in_wire (
      .d(mouse_xy_rsc_mgc_in_wire_d),
      .z(mouse_xy_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(1)) clk_en_rsc_mgc_out_stdreg (
      .d(clk_en_rsc_mgc_out_stdreg_d),
      .z(clk_en_rsc_z)
    );
  mgc_in_wire #(.rscid(5),
  .width(30)) video_in_rsc_mgc_in_wire (
      .d(video_in_rsc_mgc_in_wire_d),
      .z(video_in_rsc_z)
    );
  mgc_out_stdreg #(.rscid(6),
  .width(30)) video_out_rsc_mgc_out_stdreg (
      .d(video_out_rsc_mgc_out_stdreg_d),
      .z(video_out_rsc_z)
    );
  mgc_in_wire #(.rscid(15),
  .width(8)) cursor_size_rsc_8_0_mgc_in_wire (
      .d(cursor_size_rsc_8_0_mgc_in_wire_d),
      .z(cursor_size_rsc_8_0_z)
    );
  mouse_new_core mouse_new_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vga_xy_rsc_mgc_in_wire_d(vga_xy_rsc_mgc_in_wire_d),
      .mouse_xy_rsc_mgc_in_wire_d(mouse_xy_rsc_mgc_in_wire_d),
      .clk_en_rsc_mgc_out_stdreg_d(clk_en_rsc_mgc_out_stdreg_d),
      .video_in_rsc_mgc_in_wire_d(video_in_rsc_mgc_in_wire_d),
      .video_out_rsc_mgc_out_stdreg_d(video_out_rsc_mgc_out_stdreg_d),
      .cursor_size_rsc_8_0_mgc_in_wire_d(cursor_size_rsc_8_0_mgc_in_wire_d)
    );
endmodule



