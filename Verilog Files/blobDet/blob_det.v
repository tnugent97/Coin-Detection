// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   tn1115@EEWS104A-024
//  Generated date: Wed May 11 12:58:41 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    blob_det_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module blob_det_core_fsm (
  clk, en, arst_n, fsm_output, st_main_tr0, st_FRAME_tr0, st_RESET_tr0, st_BLOB_DET_tr0,
      st_BLOB_DET_for_10_tr0, st_BLOB_DET_for_11_tr0
);
  input clk;
  input en;
  input arst_n;
  output [26:0] fsm_output;
  reg [26:0] fsm_output;
  input st_main_tr0;
  input st_FRAME_tr0;
  input st_RESET_tr0;
  input st_BLOB_DET_tr0;
  input st_BLOB_DET_for_10_tr0;
  input st_BLOB_DET_for_11_tr0;


  // FSM State Type Declaration for blob_det_core_fsm_1
  parameter
    st_main = 5'd0,
    st_FRAME = 5'd1,
    st_RESET = 5'd2,
    st_BLOB_DET = 5'd3,
    st_BLOB_DET_for = 5'd4,
    st_BLOB_DET_for_1 = 5'd5,
    st_BLOB_DET_for_2 = 5'd6,
    st_BLOB_DET_for_3 = 5'd7,
    st_BLOB_DET_for_4 = 5'd8,
    st_BLOB_DET_for_5 = 5'd9,
    st_BLOB_DET_for_6 = 5'd10,
    st_BLOB_DET_for_7 = 5'd11,
    st_BLOB_DET_for_8 = 5'd12,
    st_BLOB_DET_for_9 = 5'd13,
    st_BLOB_DET_for_10 = 5'd14,
    st_BLOB_DET_for_while = 5'd15,
    st_BLOB_DET_for_while_1 = 5'd16,
    st_BLOB_DET_for_while_2 = 5'd17,
    st_BLOB_DET_for_while_3 = 5'd18,
    st_BLOB_DET_for_while_4 = 5'd19,
    st_BLOB_DET_for_while_5 = 5'd20,
    st_BLOB_DET_for_while_6 = 5'd21,
    st_BLOB_DET_for_while_7 = 5'd22,
    st_BLOB_DET_for_while_8 = 5'd23,
    st_BLOB_DET_for_11 = 5'd24,
    st_BLOB_DET_1 = 5'd25,
    st_main_1 = 5'd26,
    state_x = 5'b00000;

  reg [4:0] state_var;
  reg [4:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : blob_det_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 27'b1;
        if ( st_main_tr0 ) begin
          state_var_NS = st_main_1;
        end
        else begin
          state_var_NS = st_FRAME;
        end
      end
      st_FRAME : begin
        fsm_output = 27'b10;
        if ( st_FRAME_tr0 ) begin
          state_var_NS = st_RESET;
        end
        else begin
          state_var_NS = st_FRAME;
        end
      end
      st_RESET : begin
        fsm_output = 27'b100;
        if ( st_RESET_tr0 ) begin
          state_var_NS = st_BLOB_DET;
        end
        else begin
          state_var_NS = st_RESET;
        end
      end
      st_BLOB_DET : begin
        fsm_output = 27'b1000;
        if ( st_BLOB_DET_tr0 ) begin
          state_var_NS = st_main_1;
        end
        else begin
          state_var_NS = st_BLOB_DET_for;
        end
      end
      st_BLOB_DET_for : begin
        fsm_output = 27'b10000;
        state_var_NS = st_BLOB_DET_for_1;
      end
      st_BLOB_DET_for_1 : begin
        fsm_output = 27'b100000;
        state_var_NS = st_BLOB_DET_for_2;
      end
      st_BLOB_DET_for_2 : begin
        fsm_output = 27'b1000000;
        state_var_NS = st_BLOB_DET_for_3;
      end
      st_BLOB_DET_for_3 : begin
        fsm_output = 27'b10000000;
        state_var_NS = st_BLOB_DET_for_4;
      end
      st_BLOB_DET_for_4 : begin
        fsm_output = 27'b100000000;
        state_var_NS = st_BLOB_DET_for_5;
      end
      st_BLOB_DET_for_5 : begin
        fsm_output = 27'b1000000000;
        state_var_NS = st_BLOB_DET_for_6;
      end
      st_BLOB_DET_for_6 : begin
        fsm_output = 27'b10000000000;
        state_var_NS = st_BLOB_DET_for_7;
      end
      st_BLOB_DET_for_7 : begin
        fsm_output = 27'b100000000000;
        state_var_NS = st_BLOB_DET_for_8;
      end
      st_BLOB_DET_for_8 : begin
        fsm_output = 27'b1000000000000;
        state_var_NS = st_BLOB_DET_for_9;
      end
      st_BLOB_DET_for_9 : begin
        fsm_output = 27'b10000000000000;
        state_var_NS = st_BLOB_DET_for_10;
      end
      st_BLOB_DET_for_10 : begin
        fsm_output = 27'b100000000000000;
        if ( st_BLOB_DET_for_10_tr0 ) begin
          state_var_NS = st_BLOB_DET_for_11;
        end
        else begin
          state_var_NS = st_BLOB_DET_for_while;
        end
      end
      st_BLOB_DET_for_while : begin
        fsm_output = 27'b1000000000000000;
        state_var_NS = st_BLOB_DET_for_while_1;
      end
      st_BLOB_DET_for_while_1 : begin
        fsm_output = 27'b10000000000000000;
        state_var_NS = st_BLOB_DET_for_while_2;
      end
      st_BLOB_DET_for_while_2 : begin
        fsm_output = 27'b100000000000000000;
        state_var_NS = st_BLOB_DET_for_while_3;
      end
      st_BLOB_DET_for_while_3 : begin
        fsm_output = 27'b1000000000000000000;
        state_var_NS = st_BLOB_DET_for_while_4;
      end
      st_BLOB_DET_for_while_4 : begin
        fsm_output = 27'b10000000000000000000;
        state_var_NS = st_BLOB_DET_for_while_5;
      end
      st_BLOB_DET_for_while_5 : begin
        fsm_output = 27'b100000000000000000000;
        state_var_NS = st_BLOB_DET_for_while_6;
      end
      st_BLOB_DET_for_while_6 : begin
        fsm_output = 27'b1000000000000000000000;
        state_var_NS = st_BLOB_DET_for_while_7;
      end
      st_BLOB_DET_for_while_7 : begin
        fsm_output = 27'b10000000000000000000000;
        state_var_NS = st_BLOB_DET_for_while_8;
      end
      st_BLOB_DET_for_while_8 : begin
        fsm_output = 27'b100000000000000000000000;
        if ( st_BLOB_DET_for_10_tr0 ) begin
          state_var_NS = st_BLOB_DET_for_11;
        end
        else begin
          state_var_NS = st_BLOB_DET_for_while;
        end
      end
      st_BLOB_DET_for_11 : begin
        fsm_output = 27'b1000000000000000000000000;
        if ( st_BLOB_DET_for_11_tr0 ) begin
          state_var_NS = st_BLOB_DET_1;
        end
        else begin
          state_var_NS = st_BLOB_DET_for;
        end
      end
      st_BLOB_DET_1 : begin
        fsm_output = 27'b10000000000000000000000000;
        state_var_NS = st_BLOB_DET;
      end
      st_main_1 : begin
        fsm_output = 27'b100000000000000000000000000;
        state_var_NS = st_main;
      end
      default : begin
        fsm_output = 27'b000000000000000000000000000;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= st_main;
    end
    else if ( en ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    blob_det_core
// ------------------------------------------------------------------


module blob_det_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, enable_copy_rsc_mgc_in_wire_d, startFrame_rsc_mgc_in_wire_d,
      area0_rsc_mgc_out_stdreg_d, area1_rsc_mgc_out_stdreg_d, area2_rsc_mgc_out_stdreg_d,
      area3_rsc_mgc_out_stdreg_d, area4_rsc_mgc_out_stdreg_d, area5_rsc_mgc_out_stdreg_d,
      area6_rsc_mgc_out_stdreg_d, area7_rsc_mgc_out_stdreg_d, area8_rsc_mgc_out_stdreg_d,
      area9_rsc_mgc_out_stdreg_d, value_rsc_singleport_data_in, value_rsc_singleport_addr,
      value_rsc_singleport_re, value_rsc_singleport_we, value_rsc_singleport_data_out,
      xList_rsc_singleport_data_in, xList_rsc_singleport_data_out, yList_rsc_singleport_data_in,
      yList_rsc_singleport_data_out, xList_rsc_singleport_addr_pff, xList_rsc_singleport_re_pff,
      xList_rsc_singleport_we_pff
);
  input clk;
  input en;
  input arst_n;
  input vin_rsc_mgc_in_wire_d;
  input enable_copy_rsc_mgc_in_wire_d;
  input startFrame_rsc_mgc_in_wire_d;
  output [13:0] area0_rsc_mgc_out_stdreg_d;
  reg [13:0] area0_rsc_mgc_out_stdreg_d;
  output [13:0] area1_rsc_mgc_out_stdreg_d;
  reg [13:0] area1_rsc_mgc_out_stdreg_d;
  output [13:0] area2_rsc_mgc_out_stdreg_d;
  reg [13:0] area2_rsc_mgc_out_stdreg_d;
  output [13:0] area3_rsc_mgc_out_stdreg_d;
  reg [13:0] area3_rsc_mgc_out_stdreg_d;
  output [13:0] area4_rsc_mgc_out_stdreg_d;
  reg [13:0] area4_rsc_mgc_out_stdreg_d;
  output [13:0] area5_rsc_mgc_out_stdreg_d;
  reg [13:0] area5_rsc_mgc_out_stdreg_d;
  output [13:0] area6_rsc_mgc_out_stdreg_d;
  reg [13:0] area6_rsc_mgc_out_stdreg_d;
  output [13:0] area7_rsc_mgc_out_stdreg_d;
  reg [13:0] area7_rsc_mgc_out_stdreg_d;
  output [13:0] area8_rsc_mgc_out_stdreg_d;
  reg [13:0] area8_rsc_mgc_out_stdreg_d;
  output [13:0] area9_rsc_mgc_out_stdreg_d;
  reg [13:0] area9_rsc_mgc_out_stdreg_d;
  output value_rsc_singleport_data_in;
  output [11:0] value_rsc_singleport_addr;
  output value_rsc_singleport_re;
  output value_rsc_singleport_we;
  input value_rsc_singleport_data_out;
  output [5:0] xList_rsc_singleport_data_in;
  input [5:0] xList_rsc_singleport_data_out;
  output [5:0] yList_rsc_singleport_data_in;
  input [5:0] yList_rsc_singleport_data_out;
  output [11:0] xList_rsc_singleport_addr_pff;
  output xList_rsc_singleport_re_pff;
  output xList_rsc_singleport_we_pff;


  // Interconnect Declarations
  wire [26:0] fsm_output;
  wire RESET_nor_tmp;
  wire or_dcpl_80;
  wire or_dcpl_82;
  wire or_dcpl_85;
  wire or_dcpl_87;
  wire or_dcpl_116;
  wire or_dcpl_122;
  wire or_dcpl_123;
  wire or_dcpl_133;
  wire or_dcpl_138;
  wire or_dcpl_143;
  wire or_dcpl_315;
  wire or_dcpl_358;
  wire nor_tmp_9;
  wire nor_tmp_10;
  wire nor_tmp_12;
  wire nor_tmp_13;
  wire nor_tmp_15;
  wire nor_tmp_16;
  wire or_tmp_32;
  wire nor_tmp_17;
  wire nor_tmp_18;
  wire mux_tmp_15;
  wire mux_tmp_17;
  wire mux_tmp_26;
  wire mux_tmp_33;
  wire or_dcpl_396;
  wire nor_tmp_46;
  wire or_tmp_54;
  wire mux_tmp_44;
  wire mux_tmp_46;
  wire mux_tmp_47;
  wire and_tmp;
  wire mux_tmp_56;
  wire mux_tmp_57;
  wire or_tmp_71;
  wire mux_tmp_58;
  wire and_dcpl_303;
  wire and_dcpl_304;
  wire or_dcpl_422;
  wire or_dcpl_423;
  wire or_dcpl_434;
  wire or_dcpl_725;
  wire or_dcpl_767;
  wire or_dcpl_770;
  wire or_dcpl_778;
  wire or_dcpl_784;
  wire or_dcpl_875;
  wire or_dcpl_877;
  wire or_dcpl_881;
  wire or_dcpl_895;
  wire or_dcpl_896;
  wire or_dcpl_899;
  wire or_dcpl_900;
  wire or_dcpl_919;
  wire or_dcpl_921;
  wire or_dcpl_941;
  wire or_dcpl_967;
  wire or_dcpl_969;
  wire or_dcpl_987;
  wire or_dcpl_988;
  wire or_dcpl_1013;
  wire or_dcpl_1033;
  wire and_dcpl_335;
  wire or_dcpl_1126;
  wire mux_tmp_64;
  reg [13:0] sums_4_lpi_2;
  reg [13:0] sums_5_lpi_2;
  reg [13:0] sums_3_lpi_2;
  reg [13:0] sums_6_lpi_2;
  reg [13:0] sums_2_lpi_2;
  reg [13:0] sums_7_lpi_2;
  reg [13:0] sums_1_lpi_2;
  reg [13:0] sums_8_lpi_2;
  reg [13:0] sums_0_lpi_2;
  reg [13:0] sums_9_lpi_2;
  reg reset_lpi_2;
  reg g_lpi_2;
  reg io_read_startFrame_rsc_d_svs;
  reg [5:0] j_1_sva;
  reg [3:0] sumsIndex_1_sva;
  reg [5:0] i_1_sva;
  reg [31:0] counter_sva;
  reg [31:0] listSize_sva;
  reg [13:0] total_sva;
  reg [18:0] FRAME_p_1_sva;
  reg [13:0] total_sva_dfm;
  reg [3:0] RESET_z_1_sva;
  reg [13:0] sums_4_lpi_3;
  reg [13:0] sums_5_lpi_3;
  reg [13:0] sums_3_lpi_3;
  reg [13:0] sums_6_lpi_3;
  reg [13:0] sums_2_lpi_3;
  reg [13:0] sums_7_lpi_3;
  reg [13:0] sums_1_lpi_3;
  reg [13:0] sums_8_lpi_3;
  reg [13:0] sums_0_lpi_3;
  reg [13:0] sums_9_lpi_3;
  reg reset_lpi_3;
  reg [6:0] x_1_sva;
  reg [13:0] sums_4_lpi_4;
  reg [13:0] sums_5_lpi_4;
  reg [13:0] sums_3_lpi_4;
  reg [13:0] sums_6_lpi_4;
  reg [13:0] sums_2_lpi_4;
  reg [13:0] sums_7_lpi_4;
  reg [13:0] sums_1_lpi_4;
  reg [13:0] sums_8_lpi_4;
  reg [13:0] sums_0_lpi_4;
  reg [13:0] sums_9_lpi_4;
  reg [31:0] listSize_lpi_3;
  reg [3:0] sumsIndex_1_lpi_3;
  reg [31:0] counter_lpi_3;
  reg reset_lpi_4;
  reg g_lpi_3;
  reg [31:0] counter_lpi_4;
  reg BLOB_DET_for_if_read_mem_value_rsc_d_svs;
  reg blob_check_unequal_cse_sva;
  reg [5:0] blob_check_if_acc_6_ncse_sva;
  reg unequal_tmp_1;
  reg [5:0] blob_check_aif_1_acc_psp_sva;
  reg blob_check_land_1_lpi_3_dfm;
  reg [31:0] listSize_lpi_3_dfm_1;
  reg unequal_tmp_2;
  reg [5:0] blob_check_if_2_acc_7_ncse_sva;
  reg [5:0] blob_check_aif_3_acc_1_ncse_sva;
  reg blob_check_land_3_lpi_3_dfm;
  reg [13:0] sums_0_lpi_4_dfm;
  reg [13:0] sums_1_lpi_4_dfm;
  reg [13:0] sums_2_lpi_4_dfm;
  reg [13:0] sums_3_lpi_4_dfm;
  reg [13:0] sums_4_lpi_4_dfm;
  reg [13:0] sums_5_lpi_4_dfm;
  reg [13:0] sums_6_lpi_4_dfm;
  reg [13:0] sums_7_lpi_4_dfm;
  reg [13:0] sums_8_lpi_4_dfm;
  reg [13:0] sums_9_lpi_4_dfm;
  reg [31:0] listSize_lpi_3_dfm_4;
  reg [3:0] sumsIndex_1_lpi_3_dfm;
  reg exit_BLOB_DET_for_while_sva;
  reg [5:0] blob_check_x_2_sva;
  reg [5:0] blob_check_y_2_sva;
  reg blob_check_1_unequal_cse_sva;
  reg [5:0] blob_check_1_aif_acc_2_ncse_lpi_4_dfm;
  reg [31:0] listSize_lpi_3_dfm_4_dfm;
  reg unequal_tmp_3;
  reg [5:0] blob_check_1_aif_1_acc_psp_sva;
  reg [5:0] blob_check_1_aif_1_acc_psp_lpi_4_dfm;
  reg [31:0] listSize_lpi_3_dfm_4_dfm_1;
  reg unequal_tmp_4;
  reg [5:0] blob_check_1_aif_2_acc_2_ncse_sva;
  reg [5:0] blob_check_1_aif_2_acc_2_ncse_lpi_4_dfm;
  reg [31:0] listSize_lpi_3_dfm_4_dfm_2;
  reg [5:0] blob_check_1_aif_3_acc_1_ncse_sva;
  reg [5:0] blob_check_1_aif_3_acc_1_ncse_lpi_4_dfm;
  reg [31:0] counter_sva_1;
  reg FRAME_stage_0;
  reg [5:0] blob_check_1_aif_3_slc_acc_sdt_6_1_itm;
  reg blob_check_land_lpi_3_dfm_st;
  reg [5:0] blob_check_if_mux_1_itm;
  reg [5:0] x_slc_x_3_itm;
  reg [5:0] blob_check_if_3_acc_1_itm;
  reg [5:0] blob_check_if_3_mux_2_itm;
  reg [5:0] blob_check_if_3_mux_1_itm;
  reg BLOB_DET_for_and_itm;
  reg BLOB_DET_for_and_1_itm;
  reg [5:0] BLOB_DET_for_y_1_sva_2;
  reg [5:0] blob_check_1_aif_3_acc_psp_lpi_4_dfm_1;
  wire or_404_cse;
  wire or_401_cse;
  wire [31:0] listSize_lpi_3_dfm_4_mx0w0;
  wire RESET_and_mdf_sva;
  wire [13:0] total_sva_dfm_mx2;
  wire and_407_cse;
  wire or_518_cse;
  wire or_893_cse;
  wire or_933_cse;
  wire or_929_cse;
  wire or_966_cse;
  wire or_1204_cse;
  wire or_1220_cse;
  wire or_476_ssc;
  wire or_477_ssc;
  reg [5:0] reg_blob_check_aif_3_acc_psp_sva_tmp_1;
  reg [11:0] reg_listSize_lpi_3_dfm_tmp_20;
  reg [11:0] reg_listSize_lpi_3_dfm_2_tmp_20;
  wire mux_127_cse;
  wire or_433_cse;
  wire or_1241_cse;
  wire [3:0] RESET_acc_itm;
  wire [4:0] nl_RESET_acc_itm;
  wire [6:0] z_out;
  wire [7:0] nl_z_out;
  wire [6:0] z_out_1;
  wire [7:0] nl_z_out_1;
  wire [6:0] z_out_2;
  wire [7:0] nl_z_out_2;
  wire [6:0] z_out_3;
  wire [7:0] nl_z_out_3;
  wire [6:0] z_out_4;
  wire [7:0] nl_z_out_4;
  wire [3:0] z_out_5;
  wire [4:0] nl_z_out_5;
  wire [31:0] z_out_6;
  wire [32:0] nl_z_out_6;
  wire [31:0] z_out_7;
  wire [32:0] nl_z_out_7;
  wire [13:0] z_out_8;
  wire [14:0] nl_z_out_8;
  wire BLOB_DET_and_mdf_sva;
  wire blob_check_land_lpi_3_dfm_st_mx0w1;
  wire blob_check_land_3_lpi_3_dfm_mx1;
  wire [13:0] sums_4_lpi_2_mx1w0;
  wire [13:0] sums_5_lpi_2_mx1w0;
  wire [13:0] sums_3_lpi_2_mx1w0;
  wire [13:0] sums_6_lpi_2_mx1w0;
  wire [13:0] sums_2_lpi_2_mx1w0;
  wire [13:0] sums_7_lpi_2_mx1w0;
  wire [13:0] sums_1_lpi_2_mx1w0;
  wire [13:0] sums_8_lpi_2_mx1w0;
  wire [13:0] sums_9_lpi_2_mx1w0;
  wire [18:0] FRAME_p_1_sva_1;
  wire [19:0] nl_FRAME_p_1_sva_1;
  wire and_stg_1_sg1_sva;
  wire and_stg_9_sva;
  wire and_stg_sg3_sva;
  wire and_stg_sg2_sva;
  wire and_stg_sg1_sva;
  wire [31:0] listSize_lpi_3_dfm_mx0;
  wire [31:0] listSize_lpi_3_dfm_2_mx0;
  wire or_950_tmp;
  wire or_969_tmp;
  wire or_973_tmp;
  wire or_992_tmp;
  wire or_996_tmp;
  wire or_1015_tmp;
  wire or_1019_tmp;
  wire or_1038_tmp;
  wire or_1042_tmp;
  wire or_1061_tmp;
  wire or_1065_tmp;
  wire or_1084_tmp;
  wire or_1088_tmp;
  wire or_1107_tmp;
  wire or_1111_tmp;
  wire or_1130_tmp;
  wire or_1134_tmp;
  wire or_1153_tmp;
  wire or_1157_tmp;
  wire or_1176_tmp;
  wire or_1193_tmp;
  wire or_1196_tmp;
  wire or_cse;
  wire and_415_cse;
  wire and_416_cse;
  wire or_1258_cse;
  wire and_dcpl_349;
  wire slc_FRAME_if_exs_tmp_tmp;
  wire and_508_cse;
  wire or_1281_tmp;
  wire mux_179_itm;

  wire[0:0] mux_120_nl;
  wire[0:0] mux_119_nl;
  wire[0:0] mux_122_nl;
  wire[0:0] mux_206_nl;
  wire[0:0] mux_134_nl;
  wire[0:0] mux_178_nl;
  wire[5:0] mux1h_3_nl;
  wire[5:0] mux1h_62_nl;
  wire[0:0] mux_167_nl;
  wire[0:0] mux_166_nl;
  wire[0:0] mux_165_nl;
  wire[0:0] mux_161_nl;
  wire[0:0] mux_157_nl;
  wire[0:0] mux_160_nl;
  wire[0:0] mux_148_nl;
  wire[0:0] mux_142_nl;
  wire[0:0] mux_131_nl;
  wire[0:0] mux_130_nl;
  wire[0:0] mux_141_nl;
  wire[0:0] mux_137_nl;
  wire[0:0] mux_140_nl;
  wire[0:0] mux_147_nl;
  wire[0:0] mux_146_nl;
  wire[5:0] mux1h_231_nl;
  wire[5:0] mux1h_251_nl;
  wire[5:0] mux_205_nl;
  wire[5:0] mux_177_nl;
  wire[5:0] mux_174_nl;
  wire[3:0] mux1h_229_nl;
  wire[31:0] mux1h_230_nl;
  wire[31:0] mux_175_nl;
  wire[13:0] mux_176_nl;
  wire[13:0] BLOB_DET_for_while_mux_10_nl;

  // Interconnect Declarations for Component Instantiations 
  wire [0:0] nl_blob_det_core_fsm_inst_st_main_tr0;
  assign nl_blob_det_core_fsm_inst_st_main_tr0 = ~ startFrame_rsc_mgc_in_wire_d;
  wire [0:0] nl_blob_det_core_fsm_inst_st_FRAME_tr0;
  assign nl_blob_det_core_fsm_inst_st_FRAME_tr0 = ~ FRAME_stage_0;
  wire [0:0] nl_blob_det_core_fsm_inst_st_RESET_tr0;
  assign nl_blob_det_core_fsm_inst_st_RESET_tr0 = or_401_cse;
  wire [0:0] nl_blob_det_core_fsm_inst_st_BLOB_DET_tr0;
  assign nl_blob_det_core_fsm_inst_st_BLOB_DET_tr0 = (~ reset_lpi_3) | (x_1_sva[6]);
  wire [0:0] nl_blob_det_core_fsm_inst_st_BLOB_DET_for_11_tr0;
  assign nl_blob_det_core_fsm_inst_st_BLOB_DET_for_11_tr0 = z_out_2[6];
  blob_det_core_fsm blob_det_core_fsm_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .fsm_output(fsm_output),
      .st_main_tr0(nl_blob_det_core_fsm_inst_st_main_tr0),
      .st_FRAME_tr0(nl_blob_det_core_fsm_inst_st_FRAME_tr0),
      .st_RESET_tr0(nl_blob_det_core_fsm_inst_st_RESET_tr0),
      .st_BLOB_DET_tr0(nl_blob_det_core_fsm_inst_st_BLOB_DET_tr0),
      .st_BLOB_DET_for_10_tr0(exit_BLOB_DET_for_while_sva),
      .st_BLOB_DET_for_11_tr0(nl_blob_det_core_fsm_inst_st_BLOB_DET_for_11_tr0)
    );
  assign mux_127_cse = MUX_s_1_2_2({mux_tmp_15 , (and_407_cse | mux_tmp_17)}, value_rsc_singleport_data_out);
  assign or_433_cse = and_407_cse | nor_tmp_12 | mux_tmp_17;
  assign and_407_cse = or_dcpl_143 & blob_check_1_unequal_cse_sva;
  assign or_476_ssc = (fsm_output[5]) | (fsm_output[4]);
  assign or_477_ssc = (fsm_output[12]) | (fsm_output[11]);
  assign or_518_cse = or_dcpl_87 | (fsm_output[19]) | (fsm_output[15]) | or_dcpl_143
      | (fsm_output[21]) | or_dcpl_123 | or_dcpl_80 | or_dcpl_434 | (fsm_output[12])
      | (fsm_output[1]) | or_dcpl_133 | and_dcpl_303 | (fsm_output[11]) | (fsm_output[20])
      | (fsm_output[0]) | (fsm_output[24]) | or_dcpl_423;
  assign and_416_cse = or_401_cse & (fsm_output[2]);
  assign or_cse = or_518_cse | and_416_cse;
  assign and_415_cse = (~ or_401_cse) & (fsm_output[2]);
  assign or_1258_cse = and_416_cse | (fsm_output[25]);
  assign or_893_cse = or_dcpl_778 | or_dcpl_122 | (fsm_output[5]) | (fsm_output[11])
      | or_dcpl_422;
  assign or_929_cse = or_dcpl_778 | or_dcpl_122 | (fsm_output[11]);
  assign or_933_cse = or_dcpl_778 | or_dcpl_122;
  assign or_966_cse = or_dcpl_784 | or_dcpl_143 | or_dcpl_82 | (fsm_output[10]) |
      (fsm_output[6]) | or_dcpl_138 | or_dcpl_396 | or_dcpl_881;
  assign or_950_tmp = or_dcpl_877 | or_dcpl_875;
  assign or_969_tmp = or_dcpl_896 | or_dcpl_895;
  assign or_973_tmp = or_dcpl_900 | or_dcpl_875;
  assign or_992_tmp = or_dcpl_919 | or_dcpl_895;
  assign or_996_tmp = or_dcpl_877 | or_dcpl_921;
  assign or_1015_tmp = or_dcpl_896 | or_dcpl_941;
  assign or_1019_tmp = or_dcpl_900 | or_dcpl_921;
  assign or_1038_tmp = or_dcpl_919 | or_dcpl_941;
  assign or_1042_tmp = or_dcpl_969 | or_dcpl_967;
  assign or_1061_tmp = or_dcpl_988 | or_dcpl_987;
  assign or_1065_tmp = or_dcpl_969 | or_dcpl_921;
  assign or_1084_tmp = or_dcpl_988 | or_dcpl_941;
  assign or_1088_tmp = or_dcpl_900 | or_dcpl_1013;
  assign or_1107_tmp = or_dcpl_919 | or_dcpl_1033;
  assign or_1111_tmp = or_dcpl_969 | or_dcpl_1013;
  assign or_1130_tmp = or_dcpl_988 | or_dcpl_1033;
  assign or_1134_tmp = or_dcpl_969 | or_dcpl_875;
  assign or_1153_tmp = or_dcpl_988 | or_dcpl_895;
  assign or_1157_tmp = or_dcpl_900 | or_dcpl_967;
  assign or_1176_tmp = or_dcpl_919 | or_dcpl_987;
  assign or_1193_tmp = or_dcpl_784 | or_dcpl_85 | or_dcpl_358 | or_dcpl_123 | or_dcpl_80
      | (fsm_output[9]) | or_dcpl_396 | or_dcpl_881;
  assign or_1196_tmp = (fsm_output[10]) | (fsm_output[9]) | (fsm_output[11]);
  assign or_1204_cse = or_dcpl_315 | (fsm_output[21]) | or_dcpl_133 | (fsm_output[20]);
  assign or_1220_cse = or_dcpl_315 | (fsm_output[18]) | (fsm_output[17]) | (fsm_output[20]);
  assign total_sva_dfm_mx2 = MUX_v_14_2_2({total_sva , z_out_8}, enable_copy_rsc_mgc_in_wire_d);
  assign BLOB_DET_and_mdf_sva = (x_1_sva[5]) & (x_1_sva[4]) & (x_1_sva[3]) & (x_1_sva[2])
      & (x_1_sva[1]) & (x_1_sva[0]);
  assign blob_check_land_lpi_3_dfm_st_mx0w1 = value_rsc_singleport_data_out & blob_check_unequal_cse_sva;
  assign blob_check_land_3_lpi_3_dfm_mx1 = MUX_s_1_2_2({blob_check_land_3_lpi_3_dfm
      , blob_check_land_lpi_3_dfm_st_mx0w1}, BLOB_DET_for_if_read_mem_value_rsc_d_svs);
  assign sums_4_lpi_2_mx1w0 = sums_4_lpi_2 & (signext_14_1(~((~ (RESET_z_1_sva[3]))
      & (RESET_z_1_sva[2]) & and_stg_9_sva)));
  assign sums_5_lpi_2_mx1w0 = sums_5_lpi_2 & (signext_14_1(~((~ (RESET_z_1_sva[3]))
      & (RESET_z_1_sva[2]) & and_stg_sg1_sva)));
  assign sums_3_lpi_2_mx1w0 = sums_3_lpi_2 & (signext_14_1(~((~ (RESET_z_1_sva[3]))
      & (~ (RESET_z_1_sva[2])) & and_stg_sg3_sva)));
  assign sums_6_lpi_2_mx1w0 = sums_6_lpi_2 & (signext_14_1(~((~ (RESET_z_1_sva[3]))
      & (RESET_z_1_sva[2]) & and_stg_sg2_sva)));
  assign sums_2_lpi_2_mx1w0 = sums_2_lpi_2 & (signext_14_1(~((~ (RESET_z_1_sva[3]))
      & (~ (RESET_z_1_sva[2])) & and_stg_sg2_sva)));
  assign sums_7_lpi_2_mx1w0 = sums_7_lpi_2 & (signext_14_1(~((~ (RESET_z_1_sva[3]))
      & (RESET_z_1_sva[2]) & and_stg_sg3_sva)));
  assign sums_1_lpi_2_mx1w0 = sums_1_lpi_2 & (signext_14_1(~((~ (RESET_z_1_sva[3]))
      & and_stg_1_sg1_sva)));
  assign sums_8_lpi_2_mx1w0 = sums_8_lpi_2 & (signext_14_1(~((RESET_z_1_sva[3]) &
      (~ (RESET_z_1_sva[2])) & and_stg_9_sva)));
  assign sums_9_lpi_2_mx1w0 = sums_9_lpi_2 & (signext_14_1(~((RESET_z_1_sva[3]) &
      and_stg_1_sg1_sva)));
  assign nl_FRAME_p_1_sva_1 = FRAME_p_1_sva + 19'b1;
  assign FRAME_p_1_sva_1 = nl_FRAME_p_1_sva_1[18:0];
  assign RESET_and_mdf_sva = (RESET_z_1_sva[3]) & (RESET_z_1_sva[0]) & (~((RESET_z_1_sva[2])
      | (RESET_z_1_sva[1])));
  assign and_stg_1_sg1_sva = (~ (RESET_z_1_sva[2])) & and_stg_sg1_sva;
  assign and_stg_9_sva = ~((RESET_z_1_sva[1]) | (RESET_z_1_sva[0]));
  assign and_stg_sg3_sva = (RESET_z_1_sva[1]) & (RESET_z_1_sva[0]);
  assign and_stg_sg2_sva = (RESET_z_1_sva[1]) & (~ (RESET_z_1_sva[0]));
  assign and_stg_sg1_sva = (~ (RESET_z_1_sva[1])) & (RESET_z_1_sva[0]);
  assign listSize_lpi_3_dfm_mx0 = MUX_v_32_2_2({z_out_7 , listSize_lpi_3}, ~(blob_check_unequal_cse_sva
      & value_rsc_singleport_data_out));
  assign listSize_lpi_3_dfm_2_mx0 = MUX_v_32_2_2({z_out_7 , listSize_lpi_3_dfm_1},
      ~(value_rsc_singleport_data_out & unequal_tmp_2));
  assign listSize_lpi_3_dfm_4_mx0w0 = MUX1HOT_v_32_3_2({listSize_lpi_3 , z_out_6
      , listSize_lpi_3_dfm_2_mx0}, {(~ BLOB_DET_for_if_read_mem_value_rsc_d_svs)
      , BLOB_DET_for_and_itm , BLOB_DET_for_and_1_itm});
  assign RESET_nor_tmp = ~((total_sva_dfm[13]) | (total_sva_dfm[11]) | (total_sva_dfm[10])
      | (total_sva_dfm[9]) | (total_sva_dfm[8]) | (total_sva_dfm[7]) | (total_sva_dfm[6])
      | (total_sva_dfm[5]) | (total_sva_dfm[4]) | (total_sva_dfm[3]) | (total_sva_dfm[2])
      | (total_sva_dfm[1]) | (total_sva_dfm[0]));
  assign nl_RESET_acc_itm = conv_u2s_3_4(RESET_z_1_sva[3:1]) + 4'b1011;
  assign RESET_acc_itm = nl_RESET_acc_itm[3:0];
  assign or_dcpl_80 = (fsm_output[6]) | (fsm_output[13]);
  assign or_dcpl_82 = (fsm_output[21]) | (fsm_output[7]);
  assign or_dcpl_85 = (fsm_output[15]) | (fsm_output[16]);
  assign or_dcpl_87 = (fsm_output[23]) | (fsm_output[14]);
  assign or_dcpl_116 = (fsm_output[7]) | (fsm_output[6]);
  assign or_dcpl_122 = (fsm_output[9]) | (fsm_output[8]);
  assign or_dcpl_123 = (fsm_output[7]) | (fsm_output[10]);
  assign or_dcpl_133 = (fsm_output[18]) | (fsm_output[17]);
  assign or_dcpl_138 = (fsm_output[13]) | (fsm_output[9]);
  assign or_dcpl_143 = (fsm_output[16]) | (fsm_output[22]);
  assign or_dcpl_315 = (fsm_output[19]) | (fsm_output[16]);
  assign or_dcpl_358 = (fsm_output[22]) | (fsm_output[21]);
  assign or_401_cse = ~((total_sva_dfm[12]) & (RESET_acc_itm[3]) & RESET_nor_tmp);
  assign or_404_cse = (reset_lpi_3 & (~ (x_1_sva[6]))) | (~((fsm_output[3]) & g_lpi_2));
  assign nor_tmp_9 = (~ (x_1_sva[6])) & (x_1_sva[5]) & (x_1_sva[4]) & (x_1_sva[3])
      & (x_1_sva[2]) & (x_1_sva[1]) & (x_1_sva[0]);
  assign nor_tmp_10 = (blob_check_x_2_sva[0]) & (blob_check_x_2_sva[1]) & (blob_check_x_2_sva[2])
      & (blob_check_x_2_sva[3]) & (blob_check_x_2_sva[4]) & (blob_check_x_2_sva[5]);
  assign nor_tmp_12 = unequal_tmp_4 & (fsm_output[20]);
  assign nor_tmp_13 = unequal_tmp_3 & (fsm_output[18]);
  assign nor_tmp_15 = blob_check_unequal_cse_sva & (fsm_output[8]);
  assign nor_tmp_16 = (blob_check_y_2_sva[0]) & (blob_check_y_2_sva[1]) & (blob_check_y_2_sva[2])
      & (blob_check_y_2_sva[3]) & (blob_check_y_2_sva[4]) & (blob_check_y_2_sva[5]);
  assign or_tmp_32 = BLOB_DET_for_if_read_mem_value_rsc_d_svs | (~ nor_tmp_16);
  assign nor_tmp_17 = blob_check_land_3_lpi_3_dfm & (fsm_output[13]);
  assign nor_tmp_18 = blob_check_land_1_lpi_3_dfm & (fsm_output[9]) & BLOB_DET_for_if_read_mem_value_rsc_d_svs;
  assign mux_tmp_15 = MUX_s_1_2_2({nor_tmp_18 , BLOB_DET_for_if_read_mem_value_rsc_d_svs},
      nor_tmp_17);
  assign mux_119_nl = MUX_s_1_2_2({(nor_tmp_18 | (~ nor_tmp_16)) , or_tmp_32}, nor_tmp_17);
  assign mux_120_nl = MUX_s_1_2_2({(mux_119_nl) , or_tmp_32}, nor_tmp_15);
  assign mux_206_nl = MUX_s_1_2_2({nor_tmp_18 , BLOB_DET_for_if_read_mem_value_rsc_d_svs},
      nor_tmp_17);
  assign mux_122_nl = MUX_s_1_2_2({(mux_206_nl) , BLOB_DET_for_if_read_mem_value_rsc_d_svs},
      nor_tmp_15);
  assign mux_tmp_17 = MUX_s_1_2_2({(mux_122_nl) , (mux_120_nl)}, nor_tmp_13);
  assign mux_tmp_26 = MUX_s_1_2_2({BLOB_DET_for_if_read_mem_value_rsc_d_svs , or_tmp_32},
      nor_tmp_13);
  assign mux_134_nl = MUX_s_1_2_2({(nor_tmp_18 | nor_tmp_16) , (BLOB_DET_for_if_read_mem_value_rsc_d_svs
      | nor_tmp_16)}, nor_tmp_17);
  assign mux_tmp_33 = MUX_s_1_2_2({mux_tmp_15 , (mux_134_nl)}, nor_tmp_13);
  assign or_dcpl_396 = (fsm_output[8]) | (fsm_output[12]);
  assign nor_tmp_46 = FRAME_stage_0 & enable_copy_rsc_mgc_in_wire_d & (fsm_output[1]);
  assign or_tmp_54 = BLOB_DET_for_if_read_mem_value_rsc_d_svs | nor_tmp_46;
  assign mux_179_itm = MUX_s_1_2_2({((blob_check_land_1_lpi_3_dfm & (fsm_output[8])
      & BLOB_DET_for_if_read_mem_value_rsc_d_svs) | nor_tmp_46) , or_tmp_54}, blob_check_land_lpi_3_dfm_st
      & (fsm_output[9]));
  assign mux_tmp_44 = MUX_s_1_2_2({mux_179_itm , or_tmp_54}, nor_tmp_17);
  assign mux_178_nl = MUX_s_1_2_2({mux_179_itm , or_tmp_54}, nor_tmp_17);
  assign mux_tmp_46 = MUX_s_1_2_2({(mux_178_nl) , or_tmp_54}, ~(nor_tmp_9 | (~ unequal_tmp_2)
      | (~ (fsm_output[12]))));
  assign mux_tmp_47 = MUX_s_1_2_2({mux_tmp_46 , (~(nor_tmp_16 & (~ mux_tmp_46)))},
      nor_tmp_13);
  assign and_tmp = (fsm_output[15]) & ((xList_rsc_singleport_data_out[5]) | (xList_rsc_singleport_data_out[4])
      | (xList_rsc_singleport_data_out[3]) | (xList_rsc_singleport_data_out[2]) |
      (xList_rsc_singleport_data_out[1]) | (xList_rsc_singleport_data_out[0]));
  assign mux_tmp_56 = MUX_s_1_2_2({and_tmp , (~(nor_tmp_10 & (~ and_tmp)))}, fsm_output[19]);
  assign mux_tmp_57 = MUX_s_1_2_2({(BLOB_DET_for_if_read_mem_value_rsc_d_svs | mux_tmp_56)
      , ((~((blob_check_y_2_sva[0]) & (blob_check_y_2_sva[1]) & (blob_check_y_2_sva[2])
      & (blob_check_y_2_sva[3]) & (blob_check_y_2_sva[4]) & (blob_check_y_2_sva[5])
      & (~ BLOB_DET_for_if_read_mem_value_rsc_d_svs))) | mux_tmp_56)}, fsm_output[17]);
  assign or_tmp_71 = (or_dcpl_123 & blob_check_unequal_cse_sva & BLOB_DET_for_if_read_mem_value_rsc_d_svs)
      | mux_tmp_56;
  assign mux_tmp_58 = MUX_s_1_2_2({or_tmp_71 , (~(nor_tmp_16 & (~ or_tmp_71)))},
      fsm_output[17]);
  assign and_dcpl_303 = (fsm_output[26]) & (~ io_read_startFrame_rsc_d_svs);
  assign and_dcpl_304 = (fsm_output[26]) & io_read_startFrame_rsc_d_svs;
  assign or_dcpl_422 = (fsm_output[3]) | (fsm_output[4]);
  assign or_dcpl_423 = or_dcpl_422 | (fsm_output[25]);
  assign or_dcpl_434 = or_dcpl_122 | (fsm_output[5]);
  assign or_dcpl_725 = (fsm_output[2]) | (fsm_output[25]);
  assign or_dcpl_767 = (fsm_output[11]) | (fsm_output[20]);
  assign or_dcpl_770 = (fsm_output[12]) | (fsm_output[18]);
  assign or_dcpl_778 = or_dcpl_123 | (fsm_output[6]);
  assign or_dcpl_784 = or_dcpl_87 | (fsm_output[19]);
  assign or_dcpl_875 = (sumsIndex_1_lpi_3[2]) | (sumsIndex_1_lpi_3[0]);
  assign or_dcpl_877 = (~(value_rsc_singleport_data_out & (sumsIndex_1_lpi_3[3])))
      | (sumsIndex_1_lpi_3[1]);
  assign or_dcpl_881 = or_dcpl_133 | or_dcpl_767;
  assign or_dcpl_895 = (z_out_5[2]) | (z_out_5[0]);
  assign or_dcpl_896 = (~ (z_out_5[3])) | (z_out_5[1]);
  assign or_dcpl_899 = (~ value_rsc_singleport_data_out) | (sumsIndex_1_lpi_3[3]);
  assign or_dcpl_900 = or_dcpl_899 | (sumsIndex_1_lpi_3[1]);
  assign or_dcpl_919 = (z_out_5[3]) | (z_out_5[1]);
  assign or_dcpl_921 = (sumsIndex_1_lpi_3[2]) | (~ (sumsIndex_1_lpi_3[0]));
  assign or_dcpl_941 = (z_out_5[2]) | (~ (z_out_5[0]));
  assign or_dcpl_967 = ~((sumsIndex_1_lpi_3[2]) & (sumsIndex_1_lpi_3[0]));
  assign or_dcpl_969 = or_dcpl_899 | (~ (sumsIndex_1_lpi_3[1]));
  assign or_dcpl_987 = ~((z_out_5[2]) & (z_out_5[0]));
  assign or_dcpl_988 = (z_out_5[3]) | (~ (z_out_5[1]));
  assign or_dcpl_1013 = (~ (sumsIndex_1_lpi_3[2])) | (sumsIndex_1_lpi_3[0]);
  assign or_dcpl_1033 = (~ (z_out_5[2])) | (z_out_5[0]);
  assign and_dcpl_335 = ~((fsm_output[22]) | (fsm_output[12]));
  assign or_dcpl_1126 = ~(blob_check_1_unequal_cse_sva & value_rsc_singleport_data_out);
  assign mux_tmp_64 = value_rsc_singleport_data_out & (~((blob_check_x_2_sva[5])
      & (blob_check_x_2_sva[4]) & (blob_check_x_2_sva[3]) & (blob_check_x_2_sva[2])
      & (blob_check_x_2_sva[1]) & (blob_check_x_2_sva[0])));
  assign or_1241_cse = (fsm_output[6]) | (fsm_output[8]);
  assign value_rsc_singleport_data_in = vin_rsc_mgc_in_wire_d & (~(or_dcpl_143 |
      (fsm_output[13]) | or_dcpl_122 | (fsm_output[5]) | (fsm_output[12]) | (fsm_output[18])
      | (fsm_output[20])));
  assign mux1h_3_nl = MUX1HOT_v_6_15_2({j_1_sva , (x_1_sva[5:0]) , x_slc_x_3_itm
      , blob_check_if_acc_6_ncse_sva , blob_check_if_mux_1_itm , blob_check_aif_3_acc_1_ncse_sva
      , blob_check_if_2_acc_7_ncse_sva , blob_check_if_3_mux_2_itm , (z_out_2[5:0])
      , blob_check_1_aif_acc_2_ncse_lpi_4_dfm , blob_check_x_2_sva , blob_check_1_aif_2_acc_2_ncse_sva
      , blob_check_1_aif_2_acc_2_ncse_lpi_4_dfm , blob_check_1_aif_3_acc_1_ncse_sva
      , blob_check_1_aif_3_acc_1_ncse_lpi_4_dfm}, {(fsm_output[1]) , or_476_ssc ,
      or_1241_cse , (fsm_output[7]) , (fsm_output[9]) , (fsm_output[10]) , or_477_ssc
      , (fsm_output[13]) , (fsm_output[15]) , (fsm_output[16]) , ((fsm_output[17])
      | (fsm_output[18])) , (fsm_output[19]) , (fsm_output[20]) , (fsm_output[21])
      , (fsm_output[22])});
  assign mux1h_62_nl = MUX1HOT_v_6_11_2({i_1_sva , BLOB_DET_for_y_1_sva_2 , blob_check_aif_1_acc_psp_sva
      , reg_blob_check_aif_3_acc_psp_sva_tmp_1 , blob_check_if_3_mux_1_itm , yList_rsc_singleport_data_out
      , blob_check_y_2_sva , blob_check_1_aif_1_acc_psp_sva , blob_check_1_aif_1_acc_psp_lpi_4_dfm
      , blob_check_1_aif_3_slc_acc_sdt_6_1_itm , blob_check_1_aif_3_acc_psp_lpi_4_dfm_1},
      {(fsm_output[1]) , (or_476_ssc | (fsm_output[7]) | (fsm_output[9]) | or_477_ssc)
      , or_1241_cse , (fsm_output[10]) , (fsm_output[13]) , (fsm_output[15]) , ((fsm_output[16])
      | (fsm_output[19]) | (fsm_output[20])) , (fsm_output[17]) , (fsm_output[18])
      , (fsm_output[21]) , (fsm_output[22])});
  assign value_rsc_singleport_addr = {(mux1h_3_nl) , (mux1h_62_nl)};
  assign mux_165_nl = MUX_s_1_2_2({mux_tmp_57 , mux_tmp_58}, (BLOB_DET_for_y_1_sva_2[0])
      & (BLOB_DET_for_y_1_sva_2[1]) & (BLOB_DET_for_y_1_sva_2[2]) & (BLOB_DET_for_y_1_sva_2[3])
      & (BLOB_DET_for_y_1_sva_2[4]) & (BLOB_DET_for_y_1_sva_2[5]));
  assign mux_166_nl = MUX_s_1_2_2({mux_tmp_58 , (mux_165_nl)}, fsm_output[6]);
  assign mux_167_nl = MUX_s_1_2_2({(mux_166_nl) , mux_tmp_57}, ~(nor_tmp_9 | (~ (fsm_output[11]))));
  assign value_rsc_singleport_re = ~((mux_167_nl) | (blob_check_1_unequal_cse_sva
      & (fsm_output[21])) | (fsm_output[4]));
  assign mux_157_nl = MUX_s_1_2_2({mux_tmp_44 , ((fsm_output[5]) | and_407_cse |
      mux_tmp_47)}, value_rsc_singleport_data_out);
  assign mux_160_nl = MUX_s_1_2_2({mux_tmp_44 , ((fsm_output[5]) | and_407_cse |
      nor_tmp_12 | mux_tmp_47)}, value_rsc_singleport_data_out);
  assign mux_161_nl = MUX_s_1_2_2({(mux_160_nl) , (mux_157_nl)}, nor_tmp_10);
  assign value_rsc_singleport_we = ~ (mux_161_nl);
  assign xList_rsc_singleport_data_in = MUX1HOT_v_6_4_2({(x_1_sva[5:0]) , blob_check_if_2_acc_7_ncse_sva
      , blob_check_x_2_sva , blob_check_1_aif_2_acc_2_ncse_lpi_4_dfm}, {(or_dcpl_138
      | (fsm_output[8])) , (fsm_output[12]) , (or_dcpl_143 | (fsm_output[18])) ,
      (fsm_output[20])});
  assign xList_rsc_singleport_addr_pff = MUX1HOT_v_12_9_2({(listSize_lpi_3[11:0])
      , reg_listSize_lpi_3_dfm_tmp_20 , (listSize_lpi_3_dfm_1[11:0]) , reg_listSize_lpi_3_dfm_2_tmp_20
      , (counter_lpi_4[11:0]) , (listSize_lpi_3_dfm_4[11:0]) , (listSize_lpi_3_dfm_4_dfm[11:0])
      , (listSize_lpi_3_dfm_4_dfm_1[11:0]) , (listSize_lpi_3_dfm_4_dfm_2[11:0])},
      {(fsm_output[8]) , (fsm_output[9]) , (fsm_output[12]) , (fsm_output[13]) ,
      or_dcpl_87 , (fsm_output[16]) , (fsm_output[18]) , (fsm_output[20]) , (fsm_output[22])});
  assign xList_rsc_singleport_re_pff = ~(or_dcpl_87 & (~ exit_BLOB_DET_for_while_sva));
  assign mux_130_nl = MUX_s_1_2_2({mux_tmp_15 , or_433_cse}, value_rsc_singleport_data_out);
  assign mux_131_nl = MUX_s_1_2_2({(mux_130_nl) , mux_127_cse}, nor_tmp_10);
  assign mux_137_nl = MUX_s_1_2_2({mux_tmp_15 , (and_407_cse | mux_tmp_26)}, value_rsc_singleport_data_out);
  assign mux_140_nl = MUX_s_1_2_2({mux_tmp_33 , (and_407_cse | nor_tmp_12 | mux_tmp_26)},
      value_rsc_singleport_data_out);
  assign mux_141_nl = MUX_s_1_2_2({(mux_140_nl) , (mux_137_nl)}, nor_tmp_10);
  assign mux_142_nl = MUX_s_1_2_2({(mux_141_nl) , (mux_131_nl)}, nor_tmp_9);
  assign mux_146_nl = MUX_s_1_2_2({mux_tmp_33 , or_433_cse}, value_rsc_singleport_data_out);
  assign mux_147_nl = MUX_s_1_2_2({(mux_146_nl) , mux_127_cse}, nor_tmp_10);
  assign mux_148_nl = MUX_s_1_2_2({(mux_147_nl) , (mux_142_nl)}, unequal_tmp_2 &
      (fsm_output[12]));
  assign xList_rsc_singleport_we_pff = ~ (mux_148_nl);
  assign yList_rsc_singleport_data_in = MUX1HOT_v_6_6_2({BLOB_DET_for_y_1_sva_2 ,
      blob_check_aif_1_acc_psp_sva , blob_check_if_3_acc_1_itm , blob_check_y_2_sva
      , blob_check_1_aif_1_acc_psp_lpi_4_dfm , (z_out[5:0])}, {or_dcpl_396 , (fsm_output[9])
      , (fsm_output[13]) , ((fsm_output[16]) | (fsm_output[20])) , (fsm_output[18])
      , (fsm_output[22])});
  assign and_dcpl_349 = (fsm_output[2]) & or_401_cse;
  assign and_508_cse = (fsm_output[2]) & (~ or_401_cse);
  assign slc_FRAME_if_exs_tmp_tmp = ~((i_1_sva[5]) & (i_1_sva[4]) & (i_1_sva[3])
      & (i_1_sva[2]) & (i_1_sva[1]) & (i_1_sva[0]));
  assign or_1281_tmp = (fsm_output[5]) | (fsm_output[25]);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      area9_rsc_mgc_out_stdreg_d <= 14'b0;
      area8_rsc_mgc_out_stdreg_d <= 14'b0;
      area7_rsc_mgc_out_stdreg_d <= 14'b0;
      area6_rsc_mgc_out_stdreg_d <= 14'b0;
      area5_rsc_mgc_out_stdreg_d <= 14'b0;
      area4_rsc_mgc_out_stdreg_d <= 14'b0;
      area3_rsc_mgc_out_stdreg_d <= 14'b0;
      area2_rsc_mgc_out_stdreg_d <= 14'b0;
      area1_rsc_mgc_out_stdreg_d <= 14'b0;
      area0_rsc_mgc_out_stdreg_d <= 14'b0;
      total_sva_dfm <= 14'b0;
      g_lpi_2 <= 1'b0;
      blob_check_land_3_lpi_3_dfm <= 1'b0;
      listSize_sva <= 32'b0;
      sumsIndex_1_sva <= 4'b0;
      counter_sva <= 32'b0;
      sums_4_lpi_2 <= 14'b0;
      sums_5_lpi_2 <= 14'b0;
      sums_3_lpi_2 <= 14'b0;
      sums_6_lpi_2 <= 14'b0;
      sums_2_lpi_2 <= 14'b0;
      sums_7_lpi_2 <= 14'b0;
      sums_1_lpi_2 <= 14'b0;
      sums_8_lpi_2 <= 14'b0;
      sums_0_lpi_2 <= 14'b0;
      sums_9_lpi_2 <= 14'b0;
      reset_lpi_2 <= 1'b0;
      FRAME_stage_0 <= 1'b0;
      i_1_sva <= 6'b0;
      FRAME_p_1_sva <= 19'b0;
      total_sva <= 14'b0;
      j_1_sva <= 6'b0;
      io_read_startFrame_rsc_d_svs <= 1'b0;
      reset_lpi_4 <= 1'b0;
      g_lpi_3 <= 1'b0;
      sums_9_lpi_4 <= 14'b0;
      sums_8_lpi_4 <= 14'b0;
      sums_7_lpi_4 <= 14'b0;
      sums_6_lpi_4 <= 14'b0;
      sums_5_lpi_4 <= 14'b0;
      sums_4_lpi_4 <= 14'b0;
      sums_3_lpi_4 <= 14'b0;
      sums_2_lpi_4 <= 14'b0;
      sums_1_lpi_4 <= 14'b0;
      sums_0_lpi_4 <= 14'b0;
      sums_9_lpi_3 <= 14'b0;
      sums_8_lpi_3 <= 14'b0;
      sums_7_lpi_3 <= 14'b0;
      sums_6_lpi_3 <= 14'b0;
      sums_5_lpi_3 <= 14'b0;
      sums_4_lpi_3 <= 14'b0;
      sums_3_lpi_3 <= 14'b0;
      sums_2_lpi_3 <= 14'b0;
      sums_1_lpi_3 <= 14'b0;
      sums_0_lpi_3 <= 14'b0;
      reset_lpi_3 <= 1'b0;
      RESET_z_1_sva <= 4'b0;
      x_1_sva <= 7'b0;
      sumsIndex_1_lpi_3 <= 4'b0;
      listSize_lpi_3 <= 32'b0;
      counter_lpi_3 <= 32'b0;
      BLOB_DET_for_y_1_sva_2 <= 6'b0;
      counter_lpi_4 <= 32'b0;
      blob_check_if_acc_6_ncse_sva <= 6'b0;
      x_slc_x_3_itm <= 6'b0;
      blob_check_aif_1_acc_psp_sva <= 6'b0;
      blob_check_if_2_acc_7_ncse_sva <= 6'b0;
      blob_check_aif_3_acc_1_ncse_sva <= 6'b0;
      blob_check_unequal_cse_sva <= 1'b0;
      unequal_tmp_2 <= 1'b0;
      unequal_tmp_1 <= 1'b0;
      sums_8_lpi_4_dfm <= 14'b0;
      sums_0_lpi_4_dfm <= 14'b0;
      sums_9_lpi_4_dfm <= 14'b0;
      sums_1_lpi_4_dfm <= 14'b0;
      sums_7_lpi_4_dfm <= 14'b0;
      sums_3_lpi_4_dfm <= 14'b0;
      sums_4_lpi_4_dfm <= 14'b0;
      sums_6_lpi_4_dfm <= 14'b0;
      sums_2_lpi_4_dfm <= 14'b0;
      sums_5_lpi_4_dfm <= 14'b0;
      sumsIndex_1_lpi_3_dfm <= 4'b0;
      BLOB_DET_for_if_read_mem_value_rsc_d_svs <= 1'b0;
      blob_check_land_1_lpi_3_dfm <= 1'b0;
      blob_check_if_mux_1_itm <= 6'b0;
      listSize_lpi_3_dfm_1 <= 32'b0;
      blob_check_land_lpi_3_dfm_st <= 1'b0;
      blob_check_if_3_mux_1_itm <= 6'b0;
      blob_check_if_3_mux_2_itm <= 6'b0;
      blob_check_if_3_acc_1_itm <= 6'b0;
      BLOB_DET_for_and_itm <= 1'b0;
      BLOB_DET_for_and_1_itm <= 1'b0;
      exit_BLOB_DET_for_while_sva <= 1'b0;
      listSize_lpi_3_dfm_4 <= 32'b0;
      blob_check_1_aif_acc_2_ncse_lpi_4_dfm <= 6'b0;
      blob_check_y_2_sva <= 6'b0;
      blob_check_x_2_sva <= 6'b0;
      blob_check_1_aif_1_acc_psp_sva <= 6'b0;
      blob_check_1_aif_2_acc_2_ncse_sva <= 6'b0;
      blob_check_1_aif_3_acc_1_ncse_lpi_4_dfm <= 6'b0;
      blob_check_1_aif_3_acc_1_ncse_sva <= 6'b0;
      blob_check_1_aif_3_acc_psp_lpi_4_dfm_1 <= 6'b0;
      blob_check_1_aif_3_slc_acc_sdt_6_1_itm <= 6'b0;
      blob_check_1_aif_1_acc_psp_lpi_4_dfm <= 6'b0;
      blob_check_1_aif_2_acc_2_ncse_lpi_4_dfm <= 6'b0;
      counter_sva_1 <= 32'b0;
      blob_check_1_unequal_cse_sva <= 1'b0;
      unequal_tmp_4 <= 1'b0;
      unequal_tmp_3 <= 1'b0;
      listSize_lpi_3_dfm_4_dfm <= 32'b0;
      listSize_lpi_3_dfm_4_dfm_1 <= 32'b0;
      listSize_lpi_3_dfm_4_dfm_2 <= 32'b0;
      reg_blob_check_aif_3_acc_psp_sva_tmp_1 <= 6'b0;
      reg_listSize_lpi_3_dfm_tmp_20 <= 12'b0;
      reg_listSize_lpi_3_dfm_2_tmp_20 <= 12'b0;
    end
    else begin
      if ( en ) begin
        area9_rsc_mgc_out_stdreg_d <= MUX_v_14_2_2({sums_9_lpi_3 , area9_rsc_mgc_out_stdreg_d},
            or_404_cse);
        area8_rsc_mgc_out_stdreg_d <= MUX_v_14_2_2({sums_8_lpi_3 , area8_rsc_mgc_out_stdreg_d},
            or_404_cse);
        area7_rsc_mgc_out_stdreg_d <= MUX_v_14_2_2({sums_7_lpi_3 , area7_rsc_mgc_out_stdreg_d},
            or_404_cse);
        area6_rsc_mgc_out_stdreg_d <= MUX_v_14_2_2({sums_6_lpi_3 , area6_rsc_mgc_out_stdreg_d},
            or_404_cse);
        area5_rsc_mgc_out_stdreg_d <= MUX_v_14_2_2({sums_5_lpi_3 , area5_rsc_mgc_out_stdreg_d},
            or_404_cse);
        area4_rsc_mgc_out_stdreg_d <= MUX_v_14_2_2({sums_4_lpi_3 , area4_rsc_mgc_out_stdreg_d},
            or_404_cse);
        area3_rsc_mgc_out_stdreg_d <= MUX_v_14_2_2({sums_3_lpi_3 , area3_rsc_mgc_out_stdreg_d},
            or_404_cse);
        area2_rsc_mgc_out_stdreg_d <= MUX_v_14_2_2({sums_2_lpi_3 , area2_rsc_mgc_out_stdreg_d},
            or_404_cse);
        area1_rsc_mgc_out_stdreg_d <= MUX_v_14_2_2({sums_1_lpi_3 , area1_rsc_mgc_out_stdreg_d},
            or_404_cse);
        area0_rsc_mgc_out_stdreg_d <= MUX_v_14_2_2({sums_0_lpi_3 , area0_rsc_mgc_out_stdreg_d},
            or_404_cse);
        total_sva_dfm <= (MUX_v_14_2_2({(total_sva_dfm_mx2 | (signext_14_1(fsm_output[2])))
            , total_sva_dfm}, MUX_s_1_2_2({(~(RESET_and_mdf_sva & (fsm_output[2])))
            , ((~ RESET_and_mdf_sva) & (fsm_output[2]))}, FRAME_stage_0))) & (signext_14_1(~((fsm_output[2])
            & RESET_and_mdf_sva)));
        g_lpi_2 <= MUX1HOT_s_1_3_2({g_lpi_2 , BLOB_DET_and_mdf_sva , g_lpi_3}, {((fsm_output[1])
            | (fsm_output[2]) | and_dcpl_303 | (fsm_output[0]) | (fsm_output[3])
            | (fsm_output[25])) , (fsm_output[24]) , and_dcpl_304});
        blob_check_land_3_lpi_3_dfm <= MUX_s_1_2_2({blob_check_land_3_lpi_3_dfm ,
            blob_check_land_lpi_3_dfm_st_mx0w1}, BLOB_DET_for_if_read_mem_value_rsc_d_svs
            & (fsm_output[11]));
        listSize_sva <= (MUX_v_32_2_2({listSize_sva , listSize_lpi_3_dfm_4}, fsm_output[24]))
            & (signext_32_1(~ (fsm_output[0])));
        sumsIndex_1_sva <= (MUX_v_4_2_2({sumsIndex_1_sva , sumsIndex_1_lpi_3_dfm},
            fsm_output[24])) & (signext_4_1(~ (fsm_output[0])));
        counter_sva <= (MUX_v_32_2_2({counter_sva , counter_lpi_4}, fsm_output[24]))
            & (signext_32_1(~ (fsm_output[0])));
        sums_4_lpi_2 <= MUX1HOT_v_14_3_2({sums_4_lpi_2 , sums_4_lpi_2_mx1w0 , sums_4_lpi_4},
            {or_cse , and_415_cse , and_dcpl_304});
        sums_5_lpi_2 <= MUX1HOT_v_14_3_2({sums_5_lpi_2 , sums_5_lpi_2_mx1w0 , sums_5_lpi_4},
            {or_cse , and_415_cse , and_dcpl_304});
        sums_3_lpi_2 <= MUX1HOT_v_14_3_2({sums_3_lpi_2 , sums_3_lpi_2_mx1w0 , sums_3_lpi_4},
            {or_cse , and_415_cse , and_dcpl_304});
        sums_6_lpi_2 <= MUX1HOT_v_14_3_2({sums_6_lpi_2 , sums_6_lpi_2_mx1w0 , sums_6_lpi_4},
            {or_cse , and_415_cse , and_dcpl_304});
        sums_2_lpi_2 <= MUX1HOT_v_14_3_2({sums_2_lpi_2 , sums_2_lpi_2_mx1w0 , sums_2_lpi_4},
            {or_cse , and_415_cse , and_dcpl_304});
        sums_7_lpi_2 <= MUX1HOT_v_14_3_2({sums_7_lpi_2 , sums_7_lpi_2_mx1w0 , sums_7_lpi_4},
            {or_cse , and_415_cse , and_dcpl_304});
        sums_1_lpi_2 <= MUX1HOT_v_14_3_2({sums_1_lpi_2 , sums_1_lpi_2_mx1w0 , sums_1_lpi_4},
            {or_cse , and_415_cse , and_dcpl_304});
        sums_8_lpi_2 <= MUX1HOT_v_14_3_2({sums_8_lpi_2 , sums_8_lpi_2_mx1w0 , sums_8_lpi_4},
            {or_cse , and_415_cse , and_dcpl_304});
        sums_0_lpi_2 <= (MUX_v_14_2_2({(sums_0_lpi_4 | (signext_14_1(fsm_output[2])))
            , sums_0_lpi_2}, and_dcpl_349 | or_518_cse)) & (signext_14_1(~ and_508_cse));
        sums_9_lpi_2 <= MUX1HOT_v_14_3_2({sums_9_lpi_2 , sums_9_lpi_2_mx1w0 , sums_9_lpi_4},
            {or_cse , and_415_cse , and_dcpl_304});
        reset_lpi_2 <= MUX1HOT_s_1_3_2({reset_lpi_2 , RESET_and_mdf_sva , reset_lpi_4},
            {or_cse , and_415_cse , and_dcpl_304});
        FRAME_stage_0 <= ~((~(FRAME_stage_0 & (readslicef_8_1_7((conv_u2s_7_8(FRAME_p_1_sva_1[18:12])
            + 8'b10110101))))) & (fsm_output[1]));
        i_1_sva <= (MUX_v_6_2_2({(i_1_sva | (signext_6_1(enable_copy_rsc_mgc_in_wire_d
            & (fsm_output[1])))) , (z_out[5:0])}, (fsm_output[1]) & slc_FRAME_if_exs_tmp_tmp
            & enable_copy_rsc_mgc_in_wire_d)) & (signext_6_1((~((~ slc_FRAME_if_exs_tmp_tmp)
            & enable_copy_rsc_mgc_in_wire_d)) & (fsm_output[1])));
        FRAME_p_1_sva <= FRAME_p_1_sva_1 & (signext_19_1(fsm_output[1]));
        total_sva <= (total_sva_dfm_mx2 | (signext_14_1(~ (fsm_output[1])))) & (signext_14_1(fsm_output[1]));
        j_1_sva <= (MUX_v_6_2_2({(z_out_1[5:0]) , j_1_sva}, ((~(enable_copy_rsc_mgc_in_wire_d
            & (i_1_sva[1]))) | (~((i_1_sva[2]) & (i_1_sva[3]))) | (~((i_1_sva[4])
            & (i_1_sva[5]) & (i_1_sva[0])))) & (fsm_output[1]))) & (signext_6_1(fsm_output[1]));
        io_read_startFrame_rsc_d_svs <= MUX_s_1_2_2({io_read_startFrame_rsc_d_svs
            , startFrame_rsc_mgc_in_wire_d}, fsm_output[0]);
        reset_lpi_4 <= reset_lpi_3;
        g_lpi_3 <= g_lpi_2;
        sums_9_lpi_4 <= MUX1HOT_v_14_3_2({sums_9_lpi_3 , sums_9_lpi_4 , sums_9_lpi_4_dfm},
            {or_dcpl_725 , or_dcpl_422 , (fsm_output[24])});
        sums_8_lpi_4 <= MUX1HOT_v_14_3_2({sums_8_lpi_3 , sums_8_lpi_4 , sums_8_lpi_4_dfm},
            {or_dcpl_725 , or_dcpl_422 , (fsm_output[24])});
        sums_7_lpi_4 <= MUX1HOT_v_14_3_2({sums_7_lpi_3 , sums_7_lpi_4 , sums_7_lpi_4_dfm},
            {or_dcpl_725 , or_dcpl_422 , (fsm_output[24])});
        sums_6_lpi_4 <= MUX1HOT_v_14_3_2({sums_6_lpi_3 , sums_6_lpi_4 , sums_6_lpi_4_dfm},
            {or_dcpl_725 , or_dcpl_422 , (fsm_output[24])});
        sums_5_lpi_4 <= MUX1HOT_v_14_3_2({sums_5_lpi_3 , sums_5_lpi_4 , sums_5_lpi_4_dfm},
            {or_dcpl_725 , or_dcpl_422 , (fsm_output[24])});
        sums_4_lpi_4 <= MUX1HOT_v_14_3_2({sums_4_lpi_3 , sums_4_lpi_4 , sums_4_lpi_4_dfm},
            {or_dcpl_725 , or_dcpl_422 , (fsm_output[24])});
        sums_3_lpi_4 <= MUX1HOT_v_14_3_2({sums_3_lpi_3 , sums_3_lpi_4 , sums_3_lpi_4_dfm},
            {or_dcpl_725 , or_dcpl_422 , (fsm_output[24])});
        sums_2_lpi_4 <= MUX1HOT_v_14_3_2({sums_2_lpi_3 , sums_2_lpi_4 , sums_2_lpi_4_dfm},
            {or_dcpl_725 , or_dcpl_422 , (fsm_output[24])});
        sums_1_lpi_4 <= MUX1HOT_v_14_3_2({sums_1_lpi_3 , sums_1_lpi_4 , sums_1_lpi_4_dfm},
            {or_dcpl_725 , or_dcpl_422 , (fsm_output[24])});
        sums_0_lpi_4 <= MUX1HOT_v_14_3_2({sums_0_lpi_3 , sums_0_lpi_4 , sums_0_lpi_4_dfm},
            {or_dcpl_725 , or_dcpl_422 , (fsm_output[24])});
        sums_9_lpi_3 <= MUX1HOT_v_14_4_2({sums_9_lpi_2 , sums_9_lpi_2_mx1w0 , sums_9_lpi_3
            , sums_9_lpi_4_dfm}, {(fsm_output[1]) , and_415_cse , or_1258_cse , (fsm_output[24])});
        sums_8_lpi_3 <= MUX1HOT_v_14_4_2({sums_8_lpi_2 , sums_8_lpi_2_mx1w0 , sums_8_lpi_3
            , sums_8_lpi_4_dfm}, {(fsm_output[1]) , and_415_cse , or_1258_cse , (fsm_output[24])});
        sums_7_lpi_3 <= MUX1HOT_v_14_4_2({sums_7_lpi_2 , sums_7_lpi_2_mx1w0 , sums_7_lpi_3
            , sums_7_lpi_4_dfm}, {(fsm_output[1]) , and_415_cse , or_1258_cse , (fsm_output[24])});
        sums_6_lpi_3 <= MUX1HOT_v_14_4_2({sums_6_lpi_2 , sums_6_lpi_2_mx1w0 , sums_6_lpi_3
            , sums_6_lpi_4_dfm}, {(fsm_output[1]) , and_415_cse , or_1258_cse , (fsm_output[24])});
        sums_5_lpi_3 <= MUX1HOT_v_14_4_2({sums_5_lpi_2 , sums_5_lpi_2_mx1w0 , sums_5_lpi_3
            , sums_5_lpi_4_dfm}, {(fsm_output[1]) , and_415_cse , or_1258_cse , (fsm_output[24])});
        sums_4_lpi_3 <= MUX1HOT_v_14_4_2({sums_4_lpi_2 , sums_4_lpi_2_mx1w0 , sums_4_lpi_3
            , sums_4_lpi_4_dfm}, {(fsm_output[1]) , and_415_cse , or_1258_cse , (fsm_output[24])});
        sums_3_lpi_3 <= MUX1HOT_v_14_4_2({sums_3_lpi_2 , sums_3_lpi_2_mx1w0 , sums_3_lpi_3
            , sums_3_lpi_4_dfm}, {(fsm_output[1]) , and_415_cse , or_1258_cse , (fsm_output[24])});
        sums_2_lpi_3 <= MUX1HOT_v_14_4_2({sums_2_lpi_2 , sums_2_lpi_2_mx1w0 , sums_2_lpi_3
            , sums_2_lpi_4_dfm}, {(fsm_output[1]) , and_415_cse , or_1258_cse , (fsm_output[24])});
        sums_1_lpi_3 <= MUX1HOT_v_14_4_2({sums_1_lpi_2 , sums_1_lpi_2_mx1w0 , sums_1_lpi_3
            , sums_1_lpi_4_dfm}, {(fsm_output[1]) , and_415_cse , or_1258_cse , (fsm_output[24])});
        sums_0_lpi_3 <= (MUX_v_14_2_2({((MUX_v_14_2_2({sums_0_lpi_2 , sums_0_lpi_4_dfm},
            fsm_output[24])) | (signext_14_1(fsm_output[2]))) , sums_0_lpi_3}, and_dcpl_349
            | (fsm_output[25]))) & (signext_14_1(~ and_508_cse));
        reset_lpi_3 <= MUX1HOT_s_1_4_2({reset_lpi_2 , RESET_and_mdf_sva , reset_lpi_3
            , (reset_lpi_3 & (~ BLOB_DET_and_mdf_sva))}, {(fsm_output[1]) , ((total_sva_dfm[12])
            & (RESET_acc_itm[3]) & RESET_nor_tmp & (fsm_output[2])) , (and_416_cse
            | or_dcpl_784 | or_dcpl_85 | or_dcpl_358 | or_dcpl_778 | or_dcpl_138
            | (fsm_output[8]) | (fsm_output[5]) | or_dcpl_770 | (fsm_output[17])
            | or_dcpl_767 | ((fsm_output[24]) & (~ (z_out_2[6]))) | or_dcpl_423)
            , ((fsm_output[24]) & (z_out_2[6]))});
        RESET_z_1_sva <= (z_out_5 | (signext_4_1(~ (fsm_output[2])))) & (signext_4_1(fsm_output[2]));
        x_1_sva <= (MUX_v_7_2_2({x_1_sva , z_out_1}, fsm_output[25])) & (signext_7_1(~
            (fsm_output[2])));
        sumsIndex_1_lpi_3 <= MUX1HOT_v_4_3_2({sumsIndex_1_sva , sumsIndex_1_lpi_3
            , sumsIndex_1_lpi_3_dfm}, {or_dcpl_725 , or_dcpl_422 , (fsm_output[24])});
        listSize_lpi_3 <= MUX1HOT_v_32_3_2({listSize_sva , listSize_lpi_3 , listSize_lpi_3_dfm_4},
            {or_dcpl_725 , or_893_cse , (fsm_output[24])});
        counter_lpi_3 <= MUX1HOT_v_32_3_2({counter_sva , counter_lpi_3 , counter_lpi_4},
            {or_dcpl_725 , or_893_cse , (fsm_output[24])});
        BLOB_DET_for_y_1_sva_2 <= (MUX_v_6_2_2({(z_out_2[5:0]) , BLOB_DET_for_y_1_sva_2},
            ~((fsm_output[24]) | (fsm_output[3])))) & (signext_6_1(~ (fsm_output[3])));
        counter_lpi_4 <= MUX1HOT_v_32_3_2({counter_lpi_3 , z_out_6 , counter_lpi_4},
            {(fsm_output[3]) , (fsm_output[15]) , (or_dcpl_784 | or_dcpl_143 | or_dcpl_82
            | (fsm_output[10]) | or_dcpl_80 | or_dcpl_434 | or_dcpl_770 | (fsm_output[17])
            | (fsm_output[11]) | (fsm_output[20]) | (fsm_output[24]) | (fsm_output[4]))});
        blob_check_if_acc_6_ncse_sva <= MUX_v_6_2_2({(z_out_1[5:0]) , blob_check_if_acc_6_ncse_sva},
            or_dcpl_116);
        x_slc_x_3_itm <= x_1_sva[5:0];
        blob_check_aif_1_acc_psp_sva <= MUX_v_6_2_2({(z_out_2[5:0]) , blob_check_aif_1_acc_psp_sva},
            or_dcpl_116 | (fsm_output[8]));
        blob_check_if_2_acc_7_ncse_sva <= MUX_v_6_2_2({(z_out_4[5:0]) , blob_check_if_2_acc_7_ncse_sva},
            or_929_cse);
        blob_check_aif_3_acc_1_ncse_sva <= MUX_v_6_2_2({(z_out_3[5:0]) , blob_check_aif_3_acc_1_ncse_sva},
            or_933_cse);
        blob_check_unequal_cse_sva <= MUX_s_1_2_2({((x_1_sva[6]) | (x_1_sva[5]) |
            (x_1_sva[4]) | (x_1_sva[3]) | (x_1_sva[2]) | (x_1_sva[1]) | (x_1_sva[0]))
            , blob_check_unequal_cse_sva}, or_933_cse);
        unequal_tmp_2 <= MUX_s_1_2_2({(~((x_1_sva[5]) & (x_1_sva[4]) & (x_1_sva[3])
            & (x_1_sva[2]) & (x_1_sva[1]) & (x_1_sva[0]) & (~ (x_1_sva[6])))) , unequal_tmp_2},
            or_929_cse);
        unequal_tmp_1 <= MUX_s_1_2_2({(~((BLOB_DET_for_y_1_sva_2[5]) & (BLOB_DET_for_y_1_sva_2[4])
            & (BLOB_DET_for_y_1_sva_2[3]) & (BLOB_DET_for_y_1_sva_2[2]) & (BLOB_DET_for_y_1_sva_2[1])
            & (BLOB_DET_for_y_1_sva_2[0]))) , unequal_tmp_1}, fsm_output[6]);
        sums_8_lpi_4_dfm <= MUX1HOT_v_14_4_2({14'b1 , sums_8_lpi_4 , sums_8_lpi_4_dfm
            , z_out_8}, {((~ or_950_tmp) & (fsm_output[5])) , (or_950_tmp & (fsm_output[5]))
            , (or_966_cse | (or_969_tmp & (fsm_output[15]))) , ((~ or_969_tmp) &
            (fsm_output[15]))});
        sums_0_lpi_4_dfm <= MUX1HOT_v_14_4_2({14'b1 , sums_0_lpi_4 , sums_0_lpi_4_dfm
            , z_out_8}, {((~ or_973_tmp) & (fsm_output[5])) , (or_973_tmp & (fsm_output[5]))
            , (or_966_cse | (or_992_tmp & (fsm_output[15]))) , ((~ or_992_tmp) &
            (fsm_output[15]))});
        sums_9_lpi_4_dfm <= MUX1HOT_v_14_4_2({14'b1 , sums_9_lpi_4 , sums_9_lpi_4_dfm
            , z_out_8}, {((~ or_996_tmp) & (fsm_output[5])) , (or_996_tmp & (fsm_output[5]))
            , (or_966_cse | (or_1015_tmp & (fsm_output[15]))) , ((~ or_1015_tmp)
            & (fsm_output[15]))});
        sums_1_lpi_4_dfm <= MUX1HOT_v_14_4_2({14'b1 , sums_1_lpi_4 , sums_1_lpi_4_dfm
            , z_out_8}, {((~ or_1019_tmp) & (fsm_output[5])) , (or_1019_tmp & (fsm_output[5]))
            , (or_966_cse | (or_1038_tmp & (fsm_output[15]))) , ((~ or_1038_tmp)
            & (fsm_output[15]))});
        sums_7_lpi_4_dfm <= MUX1HOT_v_14_4_2({14'b1 , sums_7_lpi_4 , sums_7_lpi_4_dfm
            , z_out_8}, {((~ or_1042_tmp) & (fsm_output[5])) , (or_1042_tmp & (fsm_output[5]))
            , (or_966_cse | (or_1061_tmp & (fsm_output[15]))) , ((~ or_1061_tmp)
            & (fsm_output[15]))});
        sums_3_lpi_4_dfm <= MUX1HOT_v_14_4_2({14'b1 , sums_3_lpi_4 , sums_3_lpi_4_dfm
            , z_out_8}, {((~ or_1065_tmp) & (fsm_output[5])) , (or_1065_tmp & (fsm_output[5]))
            , (or_966_cse | (or_1084_tmp & (fsm_output[15]))) , ((~ or_1084_tmp)
            & (fsm_output[15]))});
        sums_4_lpi_4_dfm <= MUX1HOT_v_14_4_2({14'b1 , sums_4_lpi_4 , sums_4_lpi_4_dfm
            , z_out_8}, {((~ or_1088_tmp) & (fsm_output[5])) , (or_1088_tmp & (fsm_output[5]))
            , (or_966_cse | (or_1107_tmp & (fsm_output[15]))) , ((~ or_1107_tmp)
            & (fsm_output[15]))});
        sums_6_lpi_4_dfm <= MUX1HOT_v_14_4_2({14'b1 , sums_6_lpi_4 , sums_6_lpi_4_dfm
            , z_out_8}, {((~ or_1111_tmp) & (fsm_output[5])) , (or_1111_tmp & (fsm_output[5]))
            , (or_966_cse | (or_1130_tmp & (fsm_output[15]))) , ((~ or_1130_tmp)
            & (fsm_output[15]))});
        sums_2_lpi_4_dfm <= MUX1HOT_v_14_4_2({14'b1 , sums_2_lpi_4 , sums_2_lpi_4_dfm
            , z_out_8}, {((~ or_1134_tmp) & (fsm_output[5])) , (or_1134_tmp & (fsm_output[5]))
            , (or_966_cse | (or_1153_tmp & (fsm_output[15]))) , ((~ or_1153_tmp)
            & (fsm_output[15]))});
        sums_5_lpi_4_dfm <= MUX1HOT_v_14_4_2({14'b1 , sums_5_lpi_4 , sums_5_lpi_4_dfm
            , z_out_8}, {((~ or_1157_tmp) & (fsm_output[5])) , (or_1157_tmp & (fsm_output[5]))
            , (or_966_cse | (or_1176_tmp & (fsm_output[15]))) , ((~ or_1176_tmp)
            & (fsm_output[15]))});
        sumsIndex_1_lpi_3_dfm <= MUX1HOT_v_4_3_2({sumsIndex_1_lpi_3 , z_out_5 , sumsIndex_1_lpi_3_dfm},
            {(~(value_rsc_singleport_data_out | or_1193_tmp)) , (value_rsc_singleport_data_out
            & (~ or_1193_tmp)) , or_1193_tmp});
        BLOB_DET_for_if_read_mem_value_rsc_d_svs <= MUX_s_1_2_2({BLOB_DET_for_if_read_mem_value_rsc_d_svs
            , value_rsc_singleport_data_out}, fsm_output[5]);
        blob_check_land_1_lpi_3_dfm <= MUX_s_1_2_2({(value_rsc_singleport_data_out
            & unequal_tmp_1) , blob_check_land_1_lpi_3_dfm}, fsm_output[8]);
        blob_check_if_mux_1_itm <= blob_check_if_acc_6_ncse_sva;
        listSize_lpi_3_dfm_1 <= MUX1HOT_v_32_3_2({listSize_lpi_3_dfm_mx0 , z_out_6
            , listSize_lpi_3_dfm_1}, {(~(blob_check_land_1_lpi_3_dfm | or_1196_tmp))
            , (blob_check_land_1_lpi_3_dfm & (~ or_1196_tmp)) , or_1196_tmp});
        blob_check_land_lpi_3_dfm_st <= blob_check_land_lpi_3_dfm_st_mx0w1;
        blob_check_if_3_mux_1_itm <= MUX_v_6_2_2({reg_blob_check_aif_3_acc_psp_sva_tmp_1
            , blob_check_if_3_mux_1_itm}, fsm_output[12]);
        blob_check_if_3_mux_2_itm <= MUX_v_6_2_2({blob_check_aif_3_acc_1_ncse_sva
            , blob_check_if_3_mux_2_itm}, fsm_output[12]);
        blob_check_if_3_acc_1_itm <= MUX_v_6_2_2({(z_out_2[5:0]) , blob_check_if_3_acc_1_itm},
            fsm_output[12]);
        BLOB_DET_for_and_itm <= blob_check_land_3_lpi_3_dfm_mx1 & BLOB_DET_for_if_read_mem_value_rsc_d_svs;
        BLOB_DET_for_and_1_itm <= (~ blob_check_land_3_lpi_3_dfm_mx1) & BLOB_DET_for_if_read_mem_value_rsc_d_svs;
        exit_BLOB_DET_for_while_sva <= MUX1HOT_s_1_3_2({(~ (readslicef_34_1_33((conv_s2u_33_34({counter_lpi_3
            , 1'b1}) + conv_s2u_33_34({(~ listSize_lpi_3_dfm_4_mx0w0) , 1'b1})))))
            , (~ (readslicef_34_1_33((conv_s2u_33_34({counter_sva_1 , 1'b1}) + conv_s2u_33_34({(~
            (MUX_v_32_2_2({z_out_6 , listSize_lpi_3_dfm_4_dfm_2}, or_dcpl_1126)))
            , 1'b1}))))) , exit_BLOB_DET_for_while_sva}, {(fsm_output[12]) , (fsm_output[22])
            , and_dcpl_335});
        listSize_lpi_3_dfm_4 <= MUX1HOT_v_32_4_2({listSize_lpi_3_dfm_4_mx0w0 , z_out_6
            , listSize_lpi_3_dfm_4_dfm_2 , listSize_lpi_3_dfm_4}, {(fsm_output[12])
            , ((fsm_output[22]) & blob_check_1_unequal_cse_sva & value_rsc_singleport_data_out)
            , (or_dcpl_1126 & (fsm_output[22])) , and_dcpl_335});
        blob_check_1_aif_acc_2_ncse_lpi_4_dfm <= z_out_2[5:0];
        blob_check_y_2_sva <= MUX_v_6_2_2({yList_rsc_singleport_data_out , blob_check_y_2_sva},
            or_1204_cse);
        blob_check_x_2_sva <= MUX_v_6_2_2({xList_rsc_singleport_data_out , blob_check_x_2_sva},
            or_1204_cse);
        blob_check_1_aif_1_acc_psp_sva <= MUX_v_6_2_2({(z_out_4[5:0]) , blob_check_1_aif_1_acc_psp_sva},
            fsm_output[16]);
        blob_check_1_aif_2_acc_2_ncse_sva <= MUX_v_6_2_2({(z_out_1[5:0]) , blob_check_1_aif_2_acc_2_ncse_sva},
            (fsm_output[16]) | (fsm_output[18]) | (fsm_output[17]));
        blob_check_1_aif_3_acc_1_ncse_lpi_4_dfm <= MUX_v_6_2_2({(z_out_3[5:0]) ,
            blob_check_1_aif_3_acc_1_ncse_lpi_4_dfm}, or_1204_cse);
        blob_check_1_aif_3_acc_1_ncse_sva <= MUX_v_6_2_2({(z_out_3[5:0]) , blob_check_1_aif_3_acc_1_ncse_sva},
            or_1220_cse);
        blob_check_1_aif_3_acc_psp_lpi_4_dfm_1 <= MUX_v_6_2_2({(z_out[5:0]) , blob_check_1_aif_3_acc_psp_lpi_4_dfm_1},
            or_1204_cse);
        blob_check_1_aif_3_slc_acc_sdt_6_1_itm <= MUX_v_6_2_2({(z_out[5:0]) , blob_check_1_aif_3_slc_acc_sdt_6_1_itm},
            or_1220_cse);
        blob_check_1_aif_1_acc_psp_lpi_4_dfm <= MUX_v_6_2_2({(z_out_4[5:0]) , blob_check_1_aif_1_acc_psp_lpi_4_dfm},
            (fsm_output[16]) | (fsm_output[17]));
        blob_check_1_aif_2_acc_2_ncse_lpi_4_dfm <= MUX_v_6_2_2({(z_out_1[5:0]) ,
            blob_check_1_aif_2_acc_2_ncse_lpi_4_dfm}, or_dcpl_315 | or_dcpl_133);
        counter_sva_1 <= MUX_v_32_2_2({counter_sva_1 , z_out_6}, fsm_output[15]);
        blob_check_1_unequal_cse_sva <= MUX_s_1_2_2({blob_check_1_unequal_cse_sva
            , ((xList_rsc_singleport_data_out[5]) | (xList_rsc_singleport_data_out[4])
            | (xList_rsc_singleport_data_out[3]) | (xList_rsc_singleport_data_out[2])
            | (xList_rsc_singleport_data_out[1]) | (xList_rsc_singleport_data_out[0]))},
            fsm_output[15]);
        unequal_tmp_4 <= MUX_s_1_2_2({unequal_tmp_4 , (~((xList_rsc_singleport_data_out[5])
            & (xList_rsc_singleport_data_out[4]) & (xList_rsc_singleport_data_out[3])
            & (xList_rsc_singleport_data_out[2]) & (xList_rsc_singleport_data_out[1])
            & (xList_rsc_singleport_data_out[0])))}, fsm_output[15]);
        unequal_tmp_3 <= MUX_s_1_2_2({unequal_tmp_3 , (~((yList_rsc_singleport_data_out[5])
            & (yList_rsc_singleport_data_out[4]) & (yList_rsc_singleport_data_out[3])
            & (yList_rsc_singleport_data_out[2]) & (yList_rsc_singleport_data_out[1])
            & (yList_rsc_singleport_data_out[0])))}, fsm_output[15]);
        listSize_lpi_3_dfm_4_dfm <= MUX1HOT_v_32_3_2({z_out_6 , listSize_lpi_3_dfm_4
            , listSize_lpi_3_dfm_4_dfm}, {((fsm_output[16]) & blob_check_1_unequal_cse_sva
            & value_rsc_singleport_data_out) , (or_dcpl_1126 & (fsm_output[16]))
            , (~ (fsm_output[16]))});
        listSize_lpi_3_dfm_4_dfm_1 <= MUX1HOT_v_32_3_2({z_out_6 , listSize_lpi_3_dfm_4_dfm
            , listSize_lpi_3_dfm_4_dfm_1}, {(value_rsc_singleport_data_out & unequal_tmp_3
            & (fsm_output[18])) , ((~(value_rsc_singleport_data_out & unequal_tmp_3))
            & (fsm_output[18])) , (~ (fsm_output[18]))});
        listSize_lpi_3_dfm_4_dfm_2 <= MUX1HOT_v_32_3_2({z_out_6 , listSize_lpi_3_dfm_4_dfm_1
            , listSize_lpi_3_dfm_4_dfm_2}, {(mux_tmp_64 & unequal_tmp_4 & (fsm_output[20]))
            , ((~(mux_tmp_64 & unequal_tmp_4)) & (fsm_output[20])) , (~ (fsm_output[20]))});
        reg_blob_check_aif_3_acc_psp_sva_tmp_1 <= MUX_v_6_2_2({(z_out[5:0]) , reg_blob_check_aif_3_acc_psp_sva_tmp_1},
            or_933_cse);
        reg_listSize_lpi_3_dfm_tmp_20 <= listSize_lpi_3_dfm_mx0[11:0];
        reg_listSize_lpi_3_dfm_2_tmp_20 <= listSize_lpi_3_dfm_2_mx0[11:0];
      end
    end
  end
  assign mux1h_231_nl = MUX1HOT_v_6_4_2({i_1_sva , BLOB_DET_for_y_1_sva_2 , yList_rsc_singleport_data_out
      , blob_check_y_2_sva}, {(fsm_output[1]) , (fsm_output[5]) , (fsm_output[15])
      , (fsm_output[22])});
  assign nl_z_out = conv_u2u_6_7(mux1h_231_nl) + conv_s2u_2_7({((fsm_output[5]) |
      (fsm_output[15]) | (fsm_output[22])) , 1'b1});
  assign z_out = nl_z_out[6:0];
  assign mux1h_251_nl = MUX1HOT_v_6_3_2({j_1_sva , xList_rsc_singleport_data_out
      , (x_1_sva[5:0])}, {(~((fsm_output[15]) | or_1281_tmp)) , ((fsm_output[15])
      & (~ or_1281_tmp)) , or_1281_tmp});
  assign nl_z_out_1 = conv_u2u_6_7(mux1h_251_nl) + conv_s2u_2_7({(fsm_output[5])
      , 1'b1});
  assign z_out_1 = nl_z_out_1[6:0];
  assign mux_205_nl = MUX_v_6_2_2({BLOB_DET_for_y_1_sva_2 , xList_rsc_singleport_data_out},
      fsm_output[15]);
  assign nl_z_out_2 = conv_u2u_6_7(mux_205_nl) + conv_s2u_2_7({((fsm_output[11])
      | (fsm_output[15])) , 1'b1});
  assign z_out_2 = nl_z_out_2[6:0];
  assign mux_177_nl = MUX_v_6_2_2({(x_1_sva[5:0]) , xList_rsc_singleport_data_out},
      fsm_output[15]);
  assign nl_z_out_3 = conv_u2u_6_7(mux_177_nl) + conv_s2u_1_7(z_out[6]);
  assign z_out_3 = nl_z_out_3[6:0];
  assign mux_174_nl = MUX_v_6_2_2({(x_1_sva[5:0]) , yList_rsc_singleport_data_out},
      fsm_output[15]);
  assign nl_z_out_4 = conv_u2u_6_7(mux_174_nl) + 7'b1;
  assign z_out_4 = nl_z_out_4[6:0];
  assign mux1h_229_nl = MUX1HOT_v_4_3_2({RESET_z_1_sva , sumsIndex_1_lpi_3 , sumsIndex_1_lpi_3_dfm},
      {(fsm_output[2]) , (fsm_output[5]) , (fsm_output[15])});
  assign nl_z_out_5 = (mux1h_229_nl) + conv_s2u_2_4({(fsm_output[15]) , 1'b1});
  assign z_out_5 = nl_z_out_5[3:0];
  assign mux1h_230_nl = MUX1HOT_v_32_7_2({listSize_lpi_3_dfm_mx0 , listSize_lpi_3_dfm_4
      , listSize_lpi_3_dfm_4_dfm , listSize_lpi_3_dfm_4_dfm_1 , counter_lpi_4 , listSize_lpi_3_dfm_2_mx0
      , listSize_lpi_3_dfm_4_dfm_2}, {(fsm_output[8]) , (fsm_output[16]) , (fsm_output[18])
      , (fsm_output[20]) , (fsm_output[15]) , (fsm_output[12]) , (fsm_output[22])});
  assign nl_z_out_6 = (mux1h_230_nl) + 32'b1;
  assign z_out_6 = nl_z_out_6[31:0];
  assign mux_175_nl = MUX_v_32_2_2({listSize_lpi_3 , listSize_lpi_3_dfm_1}, fsm_output[12]);
  assign nl_z_out_7 = (mux_175_nl) + 32'b1;
  assign z_out_7 = nl_z_out_7[31:0];
  assign BLOB_DET_for_while_mux_10_nl = MUX_v_14_16_2({sums_0_lpi_4_dfm , sums_1_lpi_4_dfm
      , sums_2_lpi_4_dfm , sums_3_lpi_4_dfm , sums_4_lpi_4_dfm , sums_5_lpi_4_dfm
      , sums_6_lpi_4_dfm , sums_7_lpi_4_dfm , sums_8_lpi_4_dfm , sums_9_lpi_4_dfm
      , 14'b0 , 14'b0 , 14'b0 , 14'b0 , 14'b0 , 14'b0}, z_out_5);
  assign mux_176_nl = MUX_v_14_2_2({total_sva , (BLOB_DET_for_while_mux_10_nl)},
      fsm_output[15]);
  assign nl_z_out_8 = (mux_176_nl) + 14'b1;
  assign z_out_8 = nl_z_out_8[13:0];

  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [13:0] MUX_v_14_2_2;
    input [27:0] inputs;
    input [0:0] sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[27:14];
      end
      1'b1 : begin
        result = inputs[13:0];
      end
      default : begin
        result = inputs[27:14];
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function [13:0] signext_14_1;
    input [0:0] vector;
  begin
    signext_14_1= {{13{vector[0]}}, vector};
  end
  endfunction


  function [31:0] MUX_v_32_2_2;
    input [63:0] inputs;
    input [0:0] sel;
    reg [31:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[63:32];
      end
      1'b1 : begin
        result = inputs[31:0];
      end
      default : begin
        result = inputs[63:32];
      end
    endcase
    MUX_v_32_2_2 = result;
  end
  endfunction


  function [31:0] MUX1HOT_v_32_3_2;
    input [95:0] inputs;
    input [2:0] sel;
    reg [31:0] result;
    integer i;
  begin
    result = inputs[0+:32] & {32{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*32+:32] & {32{sel[i]}});
    MUX1HOT_v_32_3_2 = result;
  end
  endfunction


  function [5:0] MUX1HOT_v_6_15_2;
    input [89:0] inputs;
    input [14:0] sel;
    reg [5:0] result;
    integer i;
  begin
    result = inputs[0+:6] & {6{sel[0]}};
    for( i = 1; i < 15; i = i + 1 )
      result = result | (inputs[i*6+:6] & {6{sel[i]}});
    MUX1HOT_v_6_15_2 = result;
  end
  endfunction


  function [5:0] MUX1HOT_v_6_11_2;
    input [65:0] inputs;
    input [10:0] sel;
    reg [5:0] result;
    integer i;
  begin
    result = inputs[0+:6] & {6{sel[0]}};
    for( i = 1; i < 11; i = i + 1 )
      result = result | (inputs[i*6+:6] & {6{sel[i]}});
    MUX1HOT_v_6_11_2 = result;
  end
  endfunction


  function [5:0] MUX1HOT_v_6_4_2;
    input [23:0] inputs;
    input [3:0] sel;
    reg [5:0] result;
    integer i;
  begin
    result = inputs[0+:6] & {6{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*6+:6] & {6{sel[i]}});
    MUX1HOT_v_6_4_2 = result;
  end
  endfunction


  function [11:0] MUX1HOT_v_12_9_2;
    input [107:0] inputs;
    input [8:0] sel;
    reg [11:0] result;
    integer i;
  begin
    result = inputs[0+:12] & {12{sel[0]}};
    for( i = 1; i < 9; i = i + 1 )
      result = result | (inputs[i*12+:12] & {12{sel[i]}});
    MUX1HOT_v_12_9_2 = result;
  end
  endfunction


  function [5:0] MUX1HOT_v_6_6_2;
    input [35:0] inputs;
    input [5:0] sel;
    reg [5:0] result;
    integer i;
  begin
    result = inputs[0+:6] & {6{sel[0]}};
    for( i = 1; i < 6; i = i + 1 )
      result = result | (inputs[i*6+:6] & {6{sel[i]}});
    MUX1HOT_v_6_6_2 = result;
  end
  endfunction


  function [0:0] MUX1HOT_s_1_3_2;
    input [2:0] inputs;
    input [2:0] sel;
    reg [0:0] result;
    integer i;
  begin
    result = inputs[0+:1] & {1{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*1+:1] & {1{sel[i]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function [31:0] signext_32_1;
    input [0:0] vector;
  begin
    signext_32_1= {{31{vector[0]}}, vector};
  end
  endfunction


  function [3:0] MUX_v_4_2_2;
    input [7:0] inputs;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[7:4];
      end
      1'b1 : begin
        result = inputs[3:0];
      end
      default : begin
        result = inputs[7:4];
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function [3:0] signext_4_1;
    input [0:0] vector;
  begin
    signext_4_1= {{3{vector[0]}}, vector};
  end
  endfunction


  function [13:0] MUX1HOT_v_14_3_2;
    input [41:0] inputs;
    input [2:0] sel;
    reg [13:0] result;
    integer i;
  begin
    result = inputs[0+:14] & {14{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*14+:14] & {14{sel[i]}});
    MUX1HOT_v_14_3_2 = result;
  end
  endfunction


  function [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function [5:0] MUX_v_6_2_2;
    input [11:0] inputs;
    input [0:0] sel;
    reg [5:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[11:6];
      end
      1'b1 : begin
        result = inputs[5:0];
      end
      default : begin
        result = inputs[11:6];
      end
    endcase
    MUX_v_6_2_2 = result;
  end
  endfunction


  function [5:0] signext_6_1;
    input [0:0] vector;
  begin
    signext_6_1= {{5{vector[0]}}, vector};
  end
  endfunction


  function [18:0] signext_19_1;
    input [0:0] vector;
  begin
    signext_19_1= {{18{vector[0]}}, vector};
  end
  endfunction


  function [13:0] MUX1HOT_v_14_4_2;
    input [55:0] inputs;
    input [3:0] sel;
    reg [13:0] result;
    integer i;
  begin
    result = inputs[0+:14] & {14{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*14+:14] & {14{sel[i]}});
    MUX1HOT_v_14_4_2 = result;
  end
  endfunction


  function [0:0] MUX1HOT_s_1_4_2;
    input [3:0] inputs;
    input [3:0] sel;
    reg [0:0] result;
    integer i;
  begin
    result = inputs[0+:1] & {1{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*1+:1] & {1{sel[i]}});
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function [6:0] MUX_v_7_2_2;
    input [13:0] inputs;
    input [0:0] sel;
    reg [6:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[13:7];
      end
      1'b1 : begin
        result = inputs[6:0];
      end
      default : begin
        result = inputs[13:7];
      end
    endcase
    MUX_v_7_2_2 = result;
  end
  endfunction


  function [6:0] signext_7_1;
    input [0:0] vector;
  begin
    signext_7_1= {{6{vector[0]}}, vector};
  end
  endfunction


  function [3:0] MUX1HOT_v_4_3_2;
    input [11:0] inputs;
    input [2:0] sel;
    reg [3:0] result;
    integer i;
  begin
    result = inputs[0+:4] & {4{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*4+:4] & {4{sel[i]}});
    MUX1HOT_v_4_3_2 = result;
  end
  endfunction


  function [0:0] readslicef_34_1_33;
    input [33:0] vector;
    reg [33:0] tmp;
  begin
    tmp = vector >> 33;
    readslicef_34_1_33 = tmp[0:0];
  end
  endfunction


  function [31:0] MUX1HOT_v_32_4_2;
    input [127:0] inputs;
    input [3:0] sel;
    reg [31:0] result;
    integer i;
  begin
    result = inputs[0+:32] & {32{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*32+:32] & {32{sel[i]}});
    MUX1HOT_v_32_4_2 = result;
  end
  endfunction


  function [5:0] MUX1HOT_v_6_3_2;
    input [17:0] inputs;
    input [2:0] sel;
    reg [5:0] result;
    integer i;
  begin
    result = inputs[0+:6] & {6{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*6+:6] & {6{sel[i]}});
    MUX1HOT_v_6_3_2 = result;
  end
  endfunction


  function [31:0] MUX1HOT_v_32_7_2;
    input [223:0] inputs;
    input [6:0] sel;
    reg [31:0] result;
    integer i;
  begin
    result = inputs[0+:32] & {32{sel[0]}};
    for( i = 1; i < 7; i = i + 1 )
      result = result | (inputs[i*32+:32] & {32{sel[i]}});
    MUX1HOT_v_32_7_2 = result;
  end
  endfunction


  function [13:0] MUX_v_14_16_2;
    input [223:0] inputs;
    input [3:0] sel;
    reg [13:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = inputs[223:210];
      end
      4'b0001 : begin
        result = inputs[209:196];
      end
      4'b0010 : begin
        result = inputs[195:182];
      end
      4'b0011 : begin
        result = inputs[181:168];
      end
      4'b0100 : begin
        result = inputs[167:154];
      end
      4'b0101 : begin
        result = inputs[153:140];
      end
      4'b0110 : begin
        result = inputs[139:126];
      end
      4'b0111 : begin
        result = inputs[125:112];
      end
      4'b1000 : begin
        result = inputs[111:98];
      end
      4'b1001 : begin
        result = inputs[97:84];
      end
      4'b1010 : begin
        result = inputs[83:70];
      end
      4'b1011 : begin
        result = inputs[69:56];
      end
      4'b1100 : begin
        result = inputs[55:42];
      end
      4'b1101 : begin
        result = inputs[41:28];
      end
      4'b1110 : begin
        result = inputs[27:14];
      end
      4'b1111 : begin
        result = inputs[13:0];
      end
      default : begin
        result = inputs[223:210];
      end
    endcase
    MUX_v_14_16_2 = result;
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction


  function signed [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 = {1'b0, vector};
  end
  endfunction


  function  [33:0] conv_s2u_33_34 ;
    input signed [32:0]  vector ;
  begin
    conv_s2u_33_34 = {vector[32], vector};
  end
  endfunction


  function  [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function  [6:0] conv_s2u_2_7 ;
    input signed [1:0]  vector ;
  begin
    conv_s2u_2_7 = {{5{vector[1]}}, vector};
  end
  endfunction


  function  [6:0] conv_s2u_1_7 ;
    input signed [0:0]  vector ;
  begin
    conv_s2u_1_7 = {{6{vector[0]}}, vector};
  end
  endfunction


  function  [3:0] conv_s2u_2_4 ;
    input signed [1:0]  vector ;
  begin
    conv_s2u_2_4 = {{2{vector[1]}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    blob_det
//  Generated from file(s):
//   69) $PROJECT_HOME/blob_det_source_fin/blob_det.c
// ------------------------------------------------------------------


module blob_det (
  vin_rsc_z, enable_copy_rsc_z, startFrame_rsc_z, area0_rsc_z, area1_rsc_z, area2_rsc_z,
      area3_rsc_z, area4_rsc_z, area5_rsc_z, area6_rsc_z, area7_rsc_z, area8_rsc_z,
      area9_rsc_z, clk, en, arst_n
);
  input vin_rsc_z;
  input enable_copy_rsc_z;
  input startFrame_rsc_z;
  output [13:0] area0_rsc_z;
  output [13:0] area1_rsc_z;
  output [13:0] area2_rsc_z;
  output [13:0] area3_rsc_z;
  output [13:0] area4_rsc_z;
  output [13:0] area5_rsc_z;
  output [13:0] area6_rsc_z;
  output [13:0] area7_rsc_z;
  output [13:0] area8_rsc_z;
  output [13:0] area9_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire vin_rsc_mgc_in_wire_d;
  wire enable_copy_rsc_mgc_in_wire_d;
  wire startFrame_rsc_mgc_in_wire_d;
  wire [13:0] area0_rsc_mgc_out_stdreg_d;
  wire [13:0] area1_rsc_mgc_out_stdreg_d;
  wire [13:0] area2_rsc_mgc_out_stdreg_d;
  wire [13:0] area3_rsc_mgc_out_stdreg_d;
  wire [13:0] area4_rsc_mgc_out_stdreg_d;
  wire [13:0] area5_rsc_mgc_out_stdreg_d;
  wire [13:0] area6_rsc_mgc_out_stdreg_d;
  wire [13:0] area7_rsc_mgc_out_stdreg_d;
  wire [13:0] area8_rsc_mgc_out_stdreg_d;
  wire [13:0] area9_rsc_mgc_out_stdreg_d;
  wire value_rsc_singleport_data_in;
  wire [11:0] value_rsc_singleport_addr;
  wire value_rsc_singleport_re;
  wire value_rsc_singleport_we;
  wire value_rsc_singleport_data_out;
  wire [5:0] xList_rsc_singleport_data_in;
  wire [5:0] xList_rsc_singleport_data_out;
  wire [5:0] yList_rsc_singleport_data_in;
  wire [5:0] yList_rsc_singleport_data_out;
  wire [11:0] xList_rsc_singleport_addr_iff;
  wire xList_rsc_singleport_re_iff;
  wire xList_rsc_singleport_we_iff;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(1)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(1)) enable_copy_rsc_mgc_in_wire (
      .d(enable_copy_rsc_mgc_in_wire_d),
      .z(enable_copy_rsc_z)
    );
  mgc_in_wire #(.rscid(3),
  .width(1)) startFrame_rsc_mgc_in_wire (
      .d(startFrame_rsc_mgc_in_wire_d),
      .z(startFrame_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(14)) area0_rsc_mgc_out_stdreg (
      .d(area0_rsc_mgc_out_stdreg_d),
      .z(area0_rsc_z)
    );
  mgc_out_stdreg #(.rscid(5),
  .width(14)) area1_rsc_mgc_out_stdreg (
      .d(area1_rsc_mgc_out_stdreg_d),
      .z(area1_rsc_z)
    );
  mgc_out_stdreg #(.rscid(6),
  .width(14)) area2_rsc_mgc_out_stdreg (
      .d(area2_rsc_mgc_out_stdreg_d),
      .z(area2_rsc_z)
    );
  mgc_out_stdreg #(.rscid(7),
  .width(14)) area3_rsc_mgc_out_stdreg (
      .d(area3_rsc_mgc_out_stdreg_d),
      .z(area3_rsc_z)
    );
  mgc_out_stdreg #(.rscid(8),
  .width(14)) area4_rsc_mgc_out_stdreg (
      .d(area4_rsc_mgc_out_stdreg_d),
      .z(area4_rsc_z)
    );
  mgc_out_stdreg #(.rscid(9),
  .width(14)) area5_rsc_mgc_out_stdreg (
      .d(area5_rsc_mgc_out_stdreg_d),
      .z(area5_rsc_z)
    );
  mgc_out_stdreg #(.rscid(10),
  .width(14)) area6_rsc_mgc_out_stdreg (
      .d(area6_rsc_mgc_out_stdreg_d),
      .z(area6_rsc_z)
    );
  mgc_out_stdreg #(.rscid(11),
  .width(14)) area7_rsc_mgc_out_stdreg (
      .d(area7_rsc_mgc_out_stdreg_d),
      .z(area7_rsc_z)
    );
  mgc_out_stdreg #(.rscid(12),
  .width(14)) area8_rsc_mgc_out_stdreg (
      .d(area8_rsc_mgc_out_stdreg_d),
      .z(area8_rsc_z)
    );
  mgc_out_stdreg #(.rscid(13),
  .width(14)) area9_rsc_mgc_out_stdreg (
      .d(area9_rsc_mgc_out_stdreg_d),
      .z(area9_rsc_z)
    );
  singleport_ram_be #(.ram_id(15),
  .words(4096),
  .width(1),
  .addr_width(12),
  .a_reset_active(0),
  .s_reset_active(0),
  .enable_active(1),
  .re_active(0),
  .we_active(0),
  .num_byte_enables(1),
  .clock_edge(1),
  .num_input_registers(1),
  .num_output_registers(0),
  .no_of_singleport_readwrite_port(1)) value_rsc_singleport (
      .data_in(value_rsc_singleport_data_in),
      .addr(value_rsc_singleport_addr),
      .re(value_rsc_singleport_re),
      .we(value_rsc_singleport_we),
      .data_out(value_rsc_singleport_data_out),
      .clk(clk),
      .a_rst(arst_n),
      .s_rst(1'b1),
      .en(en)
    );
  singleport_ram_be #(.ram_id(16),
  .words(4096),
  .width(6),
  .addr_width(12),
  .a_reset_active(0),
  .s_reset_active(0),
  .enable_active(1),
  .re_active(0),
  .we_active(0),
  .num_byte_enables(1),
  .clock_edge(1),
  .num_input_registers(1),
  .num_output_registers(0),
  .no_of_singleport_readwrite_port(1)) xList_rsc_singleport (
      .data_in(xList_rsc_singleport_data_in),
      .addr(xList_rsc_singleport_addr_iff),
      .re(xList_rsc_singleport_re_iff),
      .we(xList_rsc_singleport_we_iff),
      .data_out(xList_rsc_singleport_data_out),
      .clk(clk),
      .a_rst(arst_n),
      .s_rst(1'b1),
      .en(en)
    );
  singleport_ram_be #(.ram_id(17),
  .words(4096),
  .width(6),
  .addr_width(12),
  .a_reset_active(0),
  .s_reset_active(0),
  .enable_active(1),
  .re_active(0),
  .we_active(0),
  .num_byte_enables(1),
  .clock_edge(1),
  .num_input_registers(1),
  .num_output_registers(0),
  .no_of_singleport_readwrite_port(1)) yList_rsc_singleport (
      .data_in(yList_rsc_singleport_data_in),
      .addr(xList_rsc_singleport_addr_iff),
      .re(xList_rsc_singleport_re_iff),
      .we(xList_rsc_singleport_we_iff),
      .data_out(yList_rsc_singleport_data_out),
      .clk(clk),
      .a_rst(arst_n),
      .s_rst(1'b1),
      .en(en)
    );
  blob_det_core blob_det_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .enable_copy_rsc_mgc_in_wire_d(enable_copy_rsc_mgc_in_wire_d),
      .startFrame_rsc_mgc_in_wire_d(startFrame_rsc_mgc_in_wire_d),
      .area0_rsc_mgc_out_stdreg_d(area0_rsc_mgc_out_stdreg_d),
      .area1_rsc_mgc_out_stdreg_d(area1_rsc_mgc_out_stdreg_d),
      .area2_rsc_mgc_out_stdreg_d(area2_rsc_mgc_out_stdreg_d),
      .area3_rsc_mgc_out_stdreg_d(area3_rsc_mgc_out_stdreg_d),
      .area4_rsc_mgc_out_stdreg_d(area4_rsc_mgc_out_stdreg_d),
      .area5_rsc_mgc_out_stdreg_d(area5_rsc_mgc_out_stdreg_d),
      .area6_rsc_mgc_out_stdreg_d(area6_rsc_mgc_out_stdreg_d),
      .area7_rsc_mgc_out_stdreg_d(area7_rsc_mgc_out_stdreg_d),
      .area8_rsc_mgc_out_stdreg_d(area8_rsc_mgc_out_stdreg_d),
      .area9_rsc_mgc_out_stdreg_d(area9_rsc_mgc_out_stdreg_d),
      .value_rsc_singleport_data_in(value_rsc_singleport_data_in),
      .value_rsc_singleport_addr(value_rsc_singleport_addr),
      .value_rsc_singleport_re(value_rsc_singleport_re),
      .value_rsc_singleport_we(value_rsc_singleport_we),
      .value_rsc_singleport_data_out(value_rsc_singleport_data_out),
      .xList_rsc_singleport_data_in(xList_rsc_singleport_data_in),
      .xList_rsc_singleport_data_out(xList_rsc_singleport_data_out),
      .yList_rsc_singleport_data_in(yList_rsc_singleport_data_in),
      .yList_rsc_singleport_data_out(yList_rsc_singleport_data_out),
      .xList_rsc_singleport_addr_pff(xList_rsc_singleport_addr_iff),
      .xList_rsc_singleport_re_pff(xList_rsc_singleport_re_iff),
      .xList_rsc_singleport_we_pff(xList_rsc_singleport_we_iff)
    );
endmodule



