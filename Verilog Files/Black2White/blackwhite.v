// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   ml7715@EEWS104A-021
//  Generated date: Mon Apr 25 13:41:16 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    blackwhite_core
// ------------------------------------------------------------------


module blackwhite_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, threshold_rsc_mgc_in_wire_d, vout_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [29:0] vin_rsc_mgc_in_wire_d;
  input [9:0] threshold_rsc_mgc_in_wire_d;
  output [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  reg exit_FRAME_lpi;
  reg [9:0] threshold_1_lpi_dfm;
  reg [18:0] FRAME_p_1_sva_1;
  reg reg_vout_rsc_mgc_out_stdreg_d_cse;
  wire [9:0] threshold_1_lpi_dfm_mx0;
  wire [18:0] FRAME_p_1_sva_2;
  wire [19:0] nl_FRAME_p_1_sva_2;


  // Interconnect Declarations for Component Instantiations 
  assign vout_rsc_mgc_out_stdreg_d = {({{9{reg_vout_rsc_mgc_out_stdreg_d_cse}}, reg_vout_rsc_mgc_out_stdreg_d_cse})
      , ({{9{reg_vout_rsc_mgc_out_stdreg_d_cse}}, reg_vout_rsc_mgc_out_stdreg_d_cse})
      , ({{9{reg_vout_rsc_mgc_out_stdreg_d_cse}}, reg_vout_rsc_mgc_out_stdreg_d_cse})};
  assign threshold_1_lpi_dfm_mx0 = MUX_v_10_2_2({threshold_1_lpi_dfm , threshold_rsc_mgc_in_wire_d},
      exit_FRAME_lpi);
  assign nl_FRAME_p_1_sva_2 = (FRAME_p_1_sva_1 & (signext_19_1(~ exit_FRAME_lpi)))
      + 19'b1;
  assign FRAME_p_1_sva_2 = nl_FRAME_p_1_sva_2[18:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      threshold_1_lpi_dfm <= 10'b0;
      reg_vout_rsc_mgc_out_stdreg_d_cse <= 1'b0;
      exit_FRAME_lpi <= 1'b1;
      FRAME_p_1_sva_1 <= 19'b0;
    end
    else begin
      if ( en ) begin
        threshold_1_lpi_dfm <= threshold_1_lpi_dfm_mx0;
        reg_vout_rsc_mgc_out_stdreg_d_cse <= readslicef_12_1_11((conv_u2s_11_12({threshold_1_lpi_dfm_mx0
            , 1'b1}) + ({1'b1 , (~ (vin_rsc_mgc_in_wire_d[9:0])) , 1'b1})));
        exit_FRAME_lpi <= ~ (readslicef_8_1_7((conv_u2s_7_8(FRAME_p_1_sva_2[18:12])
            + 8'b10110101)));
        FRAME_p_1_sva_1 <= FRAME_p_1_sva_2;
      end
    end
  end

  function [9:0] MUX_v_10_2_2;
    input [19:0] inputs;
    input [0:0] sel;
    reg [9:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[19:10];
      end
      1'b1 : begin
        result = inputs[9:0];
      end
      default : begin
        result = inputs[19:10];
      end
    endcase
    MUX_v_10_2_2 = result;
  end
  endfunction


  function [18:0] signext_19_1;
    input [0:0] vector;
  begin
    signext_19_1= {{18{vector[0]}}, vector};
  end
  endfunction


  function [0:0] readslicef_12_1_11;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_12_1_11 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function signed [11:0] conv_u2s_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_12 = {1'b0, vector};
  end
  endfunction


  function signed [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    blackwhite
//  Generated from file(s):
//    4) $PROJECT_HOME/Blackwhite_source/blackwhite.c
// ------------------------------------------------------------------


module blackwhite (
  vin_rsc_z, threshold_rsc_z, vout_rsc_z, clk, en, arst_n
);
  input [29:0] vin_rsc_z;
  input [9:0] threshold_rsc_z;
  output [29:0] vout_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [29:0] vin_rsc_mgc_in_wire_d;
  wire [9:0] threshold_rsc_mgc_in_wire_d;
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(30)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(10)) threshold_rsc_mgc_in_wire (
      .d(threshold_rsc_mgc_in_wire_d),
      .z(threshold_rsc_z)
    );
  mgc_out_stdreg #(.rscid(3),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  blackwhite_core blackwhite_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .threshold_rsc_mgc_in_wire_d(threshold_rsc_mgc_in_wire_d),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



