// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   tn1115@EEWS104A-024
//  Generated date: Wed May 11 17:43:55 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    areaTotal_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module areaTotal_core_fsm (
  clk, en, arst_n, fsm_output
);
  input clk;
  input en;
  input arst_n;
  output [2:0] fsm_output;
  reg [2:0] fsm_output;


  // FSM State Type Declaration for areaTotal_core_fsm_1
  parameter
    st_main = 2'd0,
    st_main_1 = 2'd1,
    st_main_2 = 2'd2,
    state_x = 2'b00;

  reg [1:0] state_var;
  reg [1:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : areaTotal_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 3'b1;
        state_var_NS = st_main_1;
      end
      st_main_1 : begin
        fsm_output = 3'b10;
        state_var_NS = st_main_2;
      end
      st_main_2 : begin
        fsm_output = 3'b100;
        state_var_NS = st_main;
      end
      default : begin
        fsm_output = 3'b000;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= st_main;
    end
    else if ( en ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    areaTotal_core
// ------------------------------------------------------------------


module areaTotal_core (
  clk, en, arst_n, area0_rsc_mgc_in_wire_d, area1_rsc_mgc_in_wire_d, area2_rsc_mgc_in_wire_d,
      area3_rsc_mgc_in_wire_d, area4_rsc_mgc_in_wire_d, area5_rsc_mgc_in_wire_d,
      area6_rsc_mgc_in_wire_d, area7_rsc_mgc_in_wire_d, area8_rsc_mgc_in_wire_d,
      area9_rsc_mgc_in_wire_d, value_out_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [13:0] area0_rsc_mgc_in_wire_d;
  input [13:0] area1_rsc_mgc_in_wire_d;
  input [13:0] area2_rsc_mgc_in_wire_d;
  input [13:0] area3_rsc_mgc_in_wire_d;
  input [13:0] area4_rsc_mgc_in_wire_d;
  input [13:0] area5_rsc_mgc_in_wire_d;
  input [13:0] area6_rsc_mgc_in_wire_d;
  input [13:0] area7_rsc_mgc_in_wire_d;
  input [13:0] area8_rsc_mgc_in_wire_d;
  input [13:0] area9_rsc_mgc_in_wire_d;
  output [13:0] value_out_rsc_mgc_out_stdreg_d;
  reg [13:0] value_out_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire [2:0] fsm_output;
  wire and_dcpl;
  wire and_dcpl_5;
  wire or_dcpl_12;
  wire or_dcpl_22;
  wire or_dcpl_25;
  wire or_dcpl_28;
  wire or_dcpl_31;
  wire or_dcpl_34;
  wire or_dcpl_37;
  reg else_else_land_lpi_dfm;
  reg else_2_else_land_lpi_dfm;
  reg else_5_else_land_lpi_dfm;
  reg else_8_else_land_lpi_dfm;
  reg land_4_lpi_dfm;
  reg else_11_else_land_lpi_dfm;
  reg land_5_lpi_dfm;
  reg else_14_else_land_lpi_dfm;
  reg land_6_lpi_dfm;
  reg else_17_else_land_lpi_dfm;
  reg land_7_lpi_dfm;
  reg else_20_else_land_lpi_dfm;
  reg land_8_lpi_dfm;
  reg else_23_else_land_lpi_dfm;
  reg land_9_lpi_dfm;
  reg else_26_else_land_lpi_dfm;
  reg else_14_and_ssc;
  reg nor_5_ssc;
  reg and_8_itm;
  reg else_11_and_itm;
  reg nor_4_itm;
  reg and_10_itm;
  reg and_12_itm;
  reg else_17_and_itm;
  reg nor_6_itm;
  reg and_14_itm;
  reg else_20_and_itm;
  reg nor_7_itm;
  reg and_16_itm;
  reg else_23_and_itm;
  reg nor_8_itm;
  reg and_18_itm;
  reg else_26_and_itm;
  reg nor_9_itm;
  reg mux1h_3_psp_sg6;
  reg mux1h_3_psp_sg5;
  reg [1:0] mux1h_3_psp_sg4;
  reg mux1h_3_psp_sg2;
  reg mux1h_3_psp_sg1;
  reg mux1h_3_psp_1;
  reg mux1h_3_psp_sg3_sg1;
  reg mux1h_3_psp_sg3_1;
  wire or_28_cse;
  wire or_31_cse;
  wire or_36_cse;
  wire or_40_cse;
  wire [11:0] else_if_acc_2_itm;
  wire [12:0] nl_else_if_acc_2_itm;
  wire [14:0] else_acc_itm;
  wire [15:0] nl_else_acc_itm;
  wire [12:0] if_acc_2_itm;
  wire [13:0] nl_if_acc_2_itm;
  wire [11:0] else_2_if_acc_2_itm;
  wire [12:0] nl_else_2_if_acc_2_itm;
  wire [14:0] else_2_acc_itm;
  wire [15:0] nl_else_2_acc_itm;
  wire [12:0] if_2_acc_2_itm;
  wire [13:0] nl_if_2_acc_2_itm;
  wire [11:0] else_5_if_acc_2_itm;
  wire [12:0] nl_else_5_if_acc_2_itm;
  wire [14:0] else_5_acc_itm;
  wire [15:0] nl_else_5_acc_itm;
  wire [12:0] if_5_acc_2_itm;
  wire [13:0] nl_if_5_acc_2_itm;
  wire [11:0] else_8_if_acc_2_itm;
  wire [12:0] nl_else_8_if_acc_2_itm;
  wire [14:0] else_8_acc_itm;
  wire [15:0] nl_else_8_acc_itm;
  wire [12:0] if_8_acc_2_itm;
  wire [13:0] nl_if_8_acc_2_itm;
  wire [11:0] else_11_if_acc_2_itm;
  wire [12:0] nl_else_11_if_acc_2_itm;
  wire [14:0] else_11_acc_itm;
  wire [15:0] nl_else_11_acc_itm;
  wire [12:0] if_11_acc_2_itm;
  wire [13:0] nl_if_11_acc_2_itm;
  wire [11:0] else_14_if_acc_2_itm;
  wire [12:0] nl_else_14_if_acc_2_itm;
  wire [14:0] else_14_acc_itm;
  wire [15:0] nl_else_14_acc_itm;
  wire [12:0] if_14_acc_2_itm;
  wire [13:0] nl_if_14_acc_2_itm;
  wire [11:0] else_17_if_acc_2_itm;
  wire [12:0] nl_else_17_if_acc_2_itm;
  wire [14:0] else_17_acc_itm;
  wire [15:0] nl_else_17_acc_itm;
  wire [12:0] if_17_acc_2_itm;
  wire [13:0] nl_if_17_acc_2_itm;
  wire [11:0] else_20_if_acc_2_itm;
  wire [12:0] nl_else_20_if_acc_2_itm;
  wire [14:0] else_20_acc_itm;
  wire [15:0] nl_else_20_acc_itm;
  wire [12:0] if_20_acc_2_itm;
  wire [13:0] nl_if_20_acc_2_itm;
  wire [11:0] else_23_if_acc_2_itm;
  wire [12:0] nl_else_23_if_acc_2_itm;
  wire [14:0] else_23_acc_itm;
  wire [15:0] nl_else_23_acc_itm;
  wire [12:0] if_23_acc_2_itm;
  wire [13:0] nl_if_23_acc_2_itm;
  wire [11:0] else_26_if_acc_2_itm;
  wire [12:0] nl_else_26_if_acc_2_itm;
  wire [14:0] else_26_acc_itm;
  wire [15:0] nl_else_26_acc_itm;
  wire [12:0] if_26_acc_2_itm;
  wire [13:0] nl_if_26_acc_2_itm;
  wire [14:0] acc_9_itm;
  wire [15:0] nl_acc_9_itm;
  wire [14:0] acc_8_itm;
  wire [15:0] nl_acc_8_itm;
  wire [14:0] acc_7_itm;
  wire [15:0] nl_acc_7_itm;
  wire [14:0] acc_6_itm;
  wire [15:0] nl_acc_6_itm;
  wire [14:0] acc_5_itm;
  wire [15:0] nl_acc_5_itm;
  wire [14:0] acc_4_itm;
  wire [15:0] nl_acc_4_itm;
  wire [14:0] acc_3_itm;
  wire [15:0] nl_acc_3_itm;
  wire [14:0] acc_2_itm;
  wire [15:0] nl_acc_2_itm;
  wire [14:0] acc_1_itm;
  wire [15:0] nl_acc_1_itm;
  wire [14:0] acc_itm;
  wire [15:0] nl_acc_itm;
  wire [8:0] z_out;
  wire [9:0] nl_z_out;
  wire [8:0] z_out_1;
  wire [9:0] nl_z_out_1;
  wire [7:0] z_out_2;
  wire [8:0] nl_z_out_2;
  wire [8:0] z_out_3;
  wire [9:0] nl_z_out_3;
  wire else_else_land_lpi_dfm_mx0w0;
  wire else_land_lpi_dfm;
  wire [3:0] tot_value_1_sva_54;
  wire [4:0] nl_tot_value_1_sva_54;
  wire mux1h_psp_sg1;
  wire [1:0] mux1h_psp_1;
  wire [3:0] tot_value_1_sva_5_sg1_sg1;
  wire [4:0] nl_tot_value_1_sva_5_sg1_sg1;
  wire [2:0] tot_value_1_sva_5_sg1_1;
  wire [3:0] nl_tot_value_1_sva_5_sg1_1;
  wire [1:0] mux1h_psp_sg3;
  wire and_27_psp;
  wire [2:0] tot_value_1_sva_6_sg1_sg2;
  wire [3:0] nl_tot_value_1_sva_6_sg1_sg2;
  wire [1:0] tot_value_1_sva_6_sg1_1;
  wire [2:0] nl_tot_value_1_sva_6_sg1_1;
  wire else_2_else_land_lpi_dfm_mx0w0;
  wire else_2_else_land_lpi_dfm_mx0;
  wire mux1h_1_psp_sg3_sg1_mx0;
  wire else_2_land_lpi_dfm;
  wire mux1h_1_psp_1_mx0;
  wire and_psp;
  wire [1:0] mux1h_1_psp_sg4;
  wire mux1h_1_psp_sg3_1;
  wire mux1h_1_psp_sg2;
  wire mux1h_1_psp_sg1;
  wire [6:0] tot_value_1_sva_9_sg2;
  wire [7:0] nl_tot_value_1_sva_9_sg2;
  wire else_5_else_land_lpi_dfm_mx0w0;
  wire else_5_else_land_lpi_dfm_mx0;
  wire else_5_land_lpi_dfm;
  wire mux1h_2_psp_1_mx0;
  wire and_21_psp;
  wire mux1h_2_psp_sg5;
  wire [1:0] mux1h_2_psp_sg4;
  wire mux1h_2_psp_sg3_sg1;
  wire mux1h_2_psp_sg3_1;
  wire mux1h_2_psp_sg2;
  wire mux1h_2_psp_sg1;
  wire [6:0] tot_value_1_sva_12_sg2;
  wire [7:0] nl_tot_value_1_sva_12_sg2;
  wire else_8_else_land_lpi_dfm_mx0w0;
  wire else_8_else_land_lpi_dfm_mx0;
  wire else_8_land_lpi_dfm;
  wire else_11_else_land_lpi_dfm_mx0w0;
  wire else_11_else_land_lpi_dfm_mx1;
  wire else_11_land_lpi_dfm;
  wire else_14_else_land_lpi_dfm_mx0w0;
  wire else_14_else_land_lpi_dfm_mx1;
  wire else_14_land_lpi_dfm;
  wire else_17_else_land_lpi_dfm_mx0w0;
  wire else_17_else_land_lpi_dfm_mx1;
  wire else_17_land_lpi_dfm;
  wire else_20_else_land_lpi_dfm_mx0w0;
  wire else_20_else_land_lpi_dfm_mx1;
  wire else_20_land_lpi_dfm;
  wire else_23_else_land_lpi_dfm_mx0w0;
  wire else_23_else_land_lpi_dfm_mx1;
  wire else_23_land_lpi_dfm;
  wire else_26_else_land_lpi_dfm_mx0w0;
  wire else_26_else_land_lpi_dfm_mx1;
  wire else_26_land_lpi_dfm;
  wire land_9_lpi_dfm_1;
  wire land_8_lpi_dfm_1;
  wire land_7_lpi_dfm_1;
  wire land_6_lpi_dfm_1;
  wire land_5_lpi_dfm_1;
  wire land_4_lpi_dfm_1;
  wire and_6_ssc;
  wire else_8_and_ssc;
  wire nor_3_ssc;
  wire land_3_lpi_dfm;
  wire and_4_ssc;
  wire else_5_and_ssc;
  wire nor_2_ssc;
  wire land_2_lpi_dfm;
  wire and_2_ssc;
  wire else_2_and_ssc;
  wire nor_1_ssc;
  wire land_1_lpi_dfm;
  wire and_1_ssc;
  wire land_lpi_dfm;
  wire [8:0] tot_value_1_sva_40;
  wire [9:0] nl_tot_value_1_sva_40;
  wire [7:0] tot_value_1_sva_14_sg1;
  wire [8:0] nl_tot_value_1_sva_14_sg1;
  wire [6:0] tot_value_1_sva_15_sg2;
  wire [7:0] nl_tot_value_1_sva_15_sg2;
  wire [8:0] tot_value_1_sva_43;
  wire [9:0] nl_tot_value_1_sva_43;
  wire mux1h_4_psp_sg6;
  wire mux1h_4_psp_sg5;
  wire [1:0] mux1h_4_psp_sg4;
  wire mux1h_4_psp_sg3_sg1;
  wire mux1h_4_psp_sg3_1;
  wire mux1h_4_psp_sg2;
  wire mux1h_4_psp_sg1;
  wire mux1h_4_psp_1_mx0;
  wire [8:0] tot_value_1_sva_17_sg1;
  wire [9:0] nl_tot_value_1_sva_17_sg1;
  wire [9:0] tot_value_1_sva_19;
  wire [10:0] nl_tot_value_1_sva_19;
  wire tot_value_1_lpi_dfm_17_sg7;
  wire tot_value_1_lpi_dfm_17_sg6;
  wire tot_value_1_lpi_dfm_17_sg5;
  wire [1:0] tot_value_1_lpi_dfm_17_sg4;
  wire tot_value_1_lpi_dfm_17_sg3_sg1;
  wire tot_value_1_lpi_dfm_17_sg3_1;
  wire tot_value_1_lpi_dfm_17_sg2;
  wire tot_value_1_lpi_dfm_17_sg1;
  wire tot_value_1_lpi_dfm_31_mx0;
  wire [8:0] tot_value_1_sva_20_sg1;
  wire [9:0] nl_tot_value_1_sva_20_sg1;
  wire [7:0] tot_value_1_sva_21_sg2;
  wire [8:0] nl_tot_value_1_sva_21_sg2;
  wire [9:0] tot_value_1_sva_22;
  wire [10:0] nl_tot_value_1_sva_22;
  wire tot_value_1_lpi_dfm_20_sg7;
  wire tot_value_1_lpi_dfm_20_sg6;
  wire tot_value_1_lpi_dfm_20_sg5;
  wire [1:0] tot_value_1_lpi_dfm_20_sg4;
  wire tot_value_1_lpi_dfm_20_sg3_sg1;
  wire tot_value_1_lpi_dfm_20_sg3_1;
  wire tot_value_1_lpi_dfm_20_sg2;
  wire tot_value_1_lpi_dfm_20_sg1;
  wire tot_value_1_lpi_dfm_32_mx0;
  wire [8:0] tot_value_1_sva_23_sg1;
  wire [9:0] nl_tot_value_1_sva_23_sg1;
  wire [7:0] tot_value_1_sva_24_sg2;
  wire [8:0] nl_tot_value_1_sva_24_sg2;
  wire [9:0] tot_value_1_sva_25;
  wire [10:0] nl_tot_value_1_sva_25;
  wire tot_value_1_lpi_dfm_23_sg7;
  wire tot_value_1_lpi_dfm_23_sg6;
  wire tot_value_1_lpi_dfm_23_sg5;
  wire [1:0] tot_value_1_lpi_dfm_23_sg4;
  wire tot_value_1_lpi_dfm_23_sg3_sg1;
  wire tot_value_1_lpi_dfm_23_sg3_1;
  wire tot_value_1_lpi_dfm_23_sg2;
  wire tot_value_1_lpi_dfm_23_sg1;
  wire tot_value_1_lpi_dfm_33_mx0;
  wire [8:0] tot_value_1_sva_26_sg1;
  wire [9:0] nl_tot_value_1_sva_26_sg1;
  wire [9:0] tot_value_1_sva_28;
  wire [10:0] nl_tot_value_1_sva_28;
  wire [7:0] tot_value_1_lpi_dfm_26_sg2;
  wire tot_value_1_lpi_dfm_26_sg1;
  wire tot_value_1_lpi_dfm_34_mx0;
  wire [1:0] mux_65_cse;

  wire[0:0] mux_1_nl;
  wire[1:0] mux_33_nl;
  wire[1:0] mux_32_nl;
  wire[0:0] mux_nl;
  wire[0:0] mux_30_nl;
  wire[0:0] mux1h_33_nl;
  wire[0:0] mux_58_nl;
  wire[7:0] mux_69_nl;
  wire[0:0] mux_64_nl;
  wire[0:0] mux_70_nl;
  wire[0:0] mux_71_nl;
  wire[0:0] mux_72_nl;
  wire[0:0] mux_73_nl;
  wire[0:0] mux_74_nl;
  wire[0:0] mux_75_nl;
  wire[0:0] mux_76_nl;
  wire[0:0] mux_66_nl;
  wire[0:0] mux_77_nl;
  wire[0:0] mux_78_nl;
  wire[0:0] mux_79_nl;
  wire[0:0] mux_80_nl;
  wire[0:0] mux_81_nl;
  wire[0:0] mux_82_nl;
  wire[0:0] mux_67_nl;
  wire[0:0] mux_83_nl;
  wire[1:0] mux_84_nl;
  wire[0:0] mux_85_nl;
  wire[0:0] mux_86_nl;
  wire[0:0] mux_87_nl;
  wire[0:0] mux_88_nl;
  wire[0:0] mux_89_nl;

  // Interconnect Declarations for Component Instantiations 
  areaTotal_core_fsm areaTotal_core_fsm_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .fsm_output(fsm_output)
    );
  assign else_else_land_lpi_dfm_mx0w0 = (readslicef_13_1_12((conv_u2u_12_13(area0_rsc_mgc_in_wire_d[13:2])
      + 13'b1111110101011))) & (readslicef_15_1_14((({1'b1 , (~ area0_rsc_mgc_in_wire_d)})
      + 15'b11100111)));
  assign else_land_lpi_dfm = (else_if_acc_2_itm[11]) & (else_acc_itm[14]);
  assign nl_else_if_acc_2_itm = conv_u2u_11_12(area0_rsc_mgc_in_wire_d[13:3]) + 12'b111110110101;
  assign else_if_acc_2_itm = nl_else_if_acc_2_itm[11:0];
  assign nl_else_acc_itm = ({1'b1 , (~ area0_rsc_mgc_in_wire_d)}) + 15'b101011111;
  assign else_acc_itm = nl_else_acc_itm[14:0];
  assign nl_if_acc_2_itm = conv_u2u_12_13(area0_rsc_mgc_in_wire_d[13:2]) + 13'b1111111001001;
  assign if_acc_2_itm = nl_if_acc_2_itm[12:0];
  assign nl_tot_value_1_sva_54 = conv_u2u_3_4({mux1h_psp_sg1 , mux1h_psp_1}) + 4'b101;
  assign tot_value_1_sva_54 = nl_tot_value_1_sva_54[3:0];
  assign mux_1_nl = MUX_s_1_2_2({else_else_land_lpi_dfm_mx0w0 , else_else_land_lpi_dfm},
      or_28_cse);
  assign mux1h_psp_sg1 = ((mux_1_nl) & (~ and_1_ssc)) | land_lpi_dfm;
  assign mux_33_nl = MUX_v_2_2_2({2'b10 , 2'b1}, land_lpi_dfm);
  assign mux1h_psp_1 = (mux_33_nl) & (signext_2_1(else_land_lpi_dfm | land_lpi_dfm));
  assign nl_tot_value_1_sva_5_sg1_sg1 = conv_u2u_3_4({mux1h_psp_sg3 , and_27_psp})
      + 4'b11;
  assign tot_value_1_sva_5_sg1_sg1 = nl_tot_value_1_sva_5_sg1_sg1[3:0];
  assign nl_tot_value_1_sva_5_sg1_1 = conv_u2u_2_3({mux1h_psp_sg1 , (mux1h_psp_1[1])})
      + 3'b1;
  assign tot_value_1_sva_5_sg1_1 = nl_tot_value_1_sva_5_sg1_1[2:0];
  assign mux_nl = MUX_s_1_2_2({else_else_land_lpi_dfm_mx0w0 , else_else_land_lpi_dfm},
      and_dcpl);
  assign mux_32_nl = MUX_v_2_2_2({(signext_2_1(mux_nl)) , 2'b1}, and_1_ssc);
  assign mux1h_psp_sg3 = (mux_32_nl) & (signext_2_1(~ land_lpi_dfm));
  assign and_27_psp = and_1_ssc & (~ land_lpi_dfm);
  assign nl_tot_value_1_sva_6_sg1_sg2 = conv_u2u_2_3(mux1h_psp_sg3) + 3'b11;
  assign tot_value_1_sva_6_sg1_sg2 = nl_tot_value_1_sva_6_sg1_sg2[2:0];
  assign nl_tot_value_1_sva_6_sg1_1 = conv_u2u_1_2(mux1h_psp_sg1) + 2'b1;
  assign tot_value_1_sva_6_sg1_1 = nl_tot_value_1_sva_6_sg1_1[1:0];
  assign else_2_else_land_lpi_dfm_mx0w0 = (readslicef_13_1_12((conv_u2u_12_13(area1_rsc_mgc_in_wire_d[13:2])
      + 13'b1111110101011))) & (readslicef_15_1_14((({1'b1 , (~ area1_rsc_mgc_in_wire_d)})
      + 15'b11100111)));
  assign else_2_else_land_lpi_dfm_mx0 = MUX_s_1_2_2({else_2_else_land_lpi_dfm_mx0w0
      , else_2_else_land_lpi_dfm}, or_31_cse);
  assign mux1h_1_psp_sg3_sg1_mx0 = MUX_s_1_2_2({and_27_psp , (tot_value_1_sva_5_sg1_sg1[0])},
      or_dcpl_12 & and_dcpl_5);
  assign else_2_land_lpi_dfm = (else_2_if_acc_2_itm[11]) & (else_2_acc_itm[14]);
  assign nl_else_2_if_acc_2_itm = conv_u2u_11_12(area1_rsc_mgc_in_wire_d[13:3]) +
      12'b111110110101;
  assign else_2_if_acc_2_itm = nl_else_2_if_acc_2_itm[11:0];
  assign nl_else_2_acc_itm = ({1'b1 , (~ area1_rsc_mgc_in_wire_d)}) + 15'b101011111;
  assign else_2_acc_itm = nl_else_2_acc_itm[14:0];
  assign mux1h_1_psp_1_mx0 = MUX_s_1_2_2({(tot_value_1_sva_54[0]) , (mux1h_psp_1[0])},
      or_dcpl_12);
  assign nl_if_2_acc_2_itm = conv_u2u_12_13(area1_rsc_mgc_in_wire_d[13:2]) + 13'b1111111001001;
  assign if_2_acc_2_itm = nl_if_2_acc_2_itm[12:0];
  assign mux_30_nl = MUX_s_1_2_2({(tot_value_1_sva_5_sg1_sg1[3]) , (tot_value_1_sva_6_sg1_sg2[2])},
      else_2_and_ssc);
  assign and_psp = (mux_30_nl) & (~(nor_1_ssc | land_1_lpi_dfm));
  assign mux1h_1_psp_sg4 = MUX1HOT_v_2_3_2({(tot_value_1_sva_5_sg1_sg1[2:1]) , (tot_value_1_sva_6_sg1_sg2[1:0])
      , mux1h_psp_sg3}, {and_2_ssc , else_2_and_ssc , (nor_1_ssc | land_1_lpi_dfm)});
  assign mux1h_33_nl = MUX1HOT_s_1_3_2({(tot_value_1_sva_5_sg1_1[2]) , (tot_value_1_sva_6_sg1_1[1])
      , (tot_value_1_sva_54[3])}, {and_2_ssc , else_2_and_ssc , land_1_lpi_dfm});
  assign mux1h_1_psp_sg3_1 = (mux1h_33_nl) & (~ nor_1_ssc);
  assign mux1h_1_psp_sg2 = MUX1HOT_s_1_4_2({(tot_value_1_sva_5_sg1_1[1]) , (tot_value_1_sva_6_sg1_1[0])
      , mux1h_psp_sg1 , (tot_value_1_sva_54[2])}, {and_2_ssc , else_2_and_ssc , nor_1_ssc
      , land_1_lpi_dfm});
  assign mux1h_1_psp_sg1 = MUX1HOT_s_1_3_2({(tot_value_1_sva_5_sg1_1[0]) , (mux1h_psp_1[1])
      , (tot_value_1_sva_54[1])}, {and_2_ssc , (else_2_and_ssc | nor_1_ssc) , land_1_lpi_dfm});
  assign nl_tot_value_1_sva_9_sg2 = conv_u2u_6_7({and_psp , mux1h_1_psp_sg4 , mux1h_1_psp_sg3_sg1_mx0
      , mux1h_1_psp_sg3_1 , mux1h_1_psp_sg2}) + 7'b11001;
  assign tot_value_1_sva_9_sg2 = nl_tot_value_1_sva_9_sg2[6:0];
  assign else_5_else_land_lpi_dfm_mx0w0 = (readslicef_13_1_12((conv_u2u_12_13(area2_rsc_mgc_in_wire_d[13:2])
      + 13'b1111110101011))) & (readslicef_15_1_14((({1'b1 , (~ area2_rsc_mgc_in_wire_d)})
      + 15'b11100111)));
  assign else_5_else_land_lpi_dfm_mx0 = MUX_s_1_2_2({else_5_else_land_lpi_dfm_mx0w0
      , else_5_else_land_lpi_dfm}, or_36_cse);
  assign else_5_land_lpi_dfm = (else_5_if_acc_2_itm[11]) & (else_5_acc_itm[14]);
  assign nl_else_5_if_acc_2_itm = conv_u2u_11_12(area2_rsc_mgc_in_wire_d[13:3]) +
      12'b111110110101;
  assign else_5_if_acc_2_itm = nl_else_5_if_acc_2_itm[11:0];
  assign nl_else_5_acc_itm = ({1'b1 , (~ area2_rsc_mgc_in_wire_d)}) + 15'b101011111;
  assign else_5_acc_itm = nl_else_5_acc_itm[14:0];
  assign mux1h_2_psp_1_mx0 = MUX_s_1_2_2({(z_out_1[0]) , mux1h_1_psp_1_mx0}, ~((acc_2_itm[14])
      & (if_5_acc_2_itm[12])));
  assign nl_if_5_acc_2_itm = conv_u2u_12_13(area2_rsc_mgc_in_wire_d[13:2]) + 13'b1111111001001;
  assign if_5_acc_2_itm = nl_if_5_acc_2_itm[12:0];
  assign and_21_psp = (tot_value_1_sva_9_sg2[6]) & (~ nor_2_ssc) & (~(and_4_ssc |
      land_2_lpi_dfm));
  assign mux1h_2_psp_sg5 = MUX1HOT_s_1_4_2({(z_out_2[6]) , (tot_value_1_sva_9_sg2[5])
      , and_psp , (z_out_1[7])}, {and_4_ssc , else_5_and_ssc , nor_2_ssc , land_2_lpi_dfm});
  assign mux1h_2_psp_sg4 = MUX1HOT_v_2_4_2({(z_out_2[5:4]) , (tot_value_1_sva_9_sg2[4:3])
      , mux1h_1_psp_sg4 , (z_out_1[6:5])}, {and_4_ssc , else_5_and_ssc , nor_2_ssc
      , land_2_lpi_dfm});
  assign mux1h_2_psp_sg3_sg1 = MUX1HOT_s_1_4_2({(z_out_2[3]) , (tot_value_1_sva_9_sg2[2])
      , mux1h_1_psp_sg3_sg1_mx0 , (z_out_1[4])}, {and_4_ssc , else_5_and_ssc , nor_2_ssc
      , land_2_lpi_dfm});
  assign mux1h_2_psp_sg3_1 = MUX1HOT_s_1_4_2({(z_out_2[2]) , (tot_value_1_sva_9_sg2[1])
      , mux1h_1_psp_sg3_1 , (z_out_1[3])}, {and_4_ssc , else_5_and_ssc , nor_2_ssc
      , land_2_lpi_dfm});
  assign mux1h_2_psp_sg2 = MUX1HOT_s_1_4_2({(z_out_2[1]) , (tot_value_1_sva_9_sg2[0])
      , mux1h_1_psp_sg2 , (z_out_1[2])}, {and_4_ssc , else_5_and_ssc , nor_2_ssc
      , land_2_lpi_dfm});
  assign mux1h_2_psp_sg1 = MUX1HOT_s_1_3_2({(z_out_2[0]) , mux1h_1_psp_sg1 , (z_out_1[1])},
      {and_4_ssc , (else_5_and_ssc | nor_2_ssc) , land_2_lpi_dfm});
  assign nl_tot_value_1_sva_12_sg2 = ({and_21_psp , mux1h_2_psp_sg5 , mux1h_2_psp_sg4
      , mux1h_2_psp_sg3_sg1 , mux1h_2_psp_sg3_1 , mux1h_2_psp_sg2}) + 7'b11001;
  assign tot_value_1_sva_12_sg2 = nl_tot_value_1_sva_12_sg2[6:0];
  assign else_8_else_land_lpi_dfm_mx0w0 = (readslicef_13_1_12((conv_u2u_12_13(area3_rsc_mgc_in_wire_d[13:2])
      + 13'b1111110101011))) & (readslicef_15_1_14((({1'b1 , (~ area3_rsc_mgc_in_wire_d)})
      + 15'b11100111)));
  assign else_8_else_land_lpi_dfm_mx0 = MUX_s_1_2_2({else_8_else_land_lpi_dfm_mx0w0
      , else_8_else_land_lpi_dfm}, or_40_cse);
  assign else_8_land_lpi_dfm = (else_8_if_acc_2_itm[11]) & (else_8_acc_itm[14]);
  assign nl_else_8_if_acc_2_itm = conv_u2u_11_12(area3_rsc_mgc_in_wire_d[13:3]) +
      12'b111110110101;
  assign else_8_if_acc_2_itm = nl_else_8_if_acc_2_itm[11:0];
  assign nl_else_8_acc_itm = ({1'b1 , (~ area3_rsc_mgc_in_wire_d)}) + 15'b101011111;
  assign else_8_acc_itm = nl_else_8_acc_itm[14:0];
  assign nl_if_8_acc_2_itm = conv_u2u_12_13(area3_rsc_mgc_in_wire_d[13:2]) + 13'b1111111001001;
  assign if_8_acc_2_itm = nl_if_8_acc_2_itm[12:0];
  assign else_11_else_land_lpi_dfm_mx0w0 = (readslicef_13_1_12((conv_u2u_12_13(area4_rsc_mgc_in_wire_d[13:2])
      + 13'b1111110101011))) & (readslicef_15_1_14((({1'b1 , (~ area4_rsc_mgc_in_wire_d)})
      + 15'b11100111)));
  assign else_11_else_land_lpi_dfm_mx1 = MUX_s_1_2_2({else_11_else_land_lpi_dfm_mx0w0
      , else_11_else_land_lpi_dfm}, or_dcpl_22);
  assign else_11_land_lpi_dfm = (else_11_if_acc_2_itm[11]) & (else_11_acc_itm[14]);
  assign nl_else_11_if_acc_2_itm = conv_u2u_11_12(area4_rsc_mgc_in_wire_d[13:3])
      + 12'b111110110101;
  assign else_11_if_acc_2_itm = nl_else_11_if_acc_2_itm[11:0];
  assign nl_else_11_acc_itm = ({1'b1 , (~ area4_rsc_mgc_in_wire_d)}) + 15'b101011111;
  assign else_11_acc_itm = nl_else_11_acc_itm[14:0];
  assign nl_if_11_acc_2_itm = conv_u2u_12_13(area4_rsc_mgc_in_wire_d[13:2]) + 13'b1111111001001;
  assign if_11_acc_2_itm = nl_if_11_acc_2_itm[12:0];
  assign else_14_else_land_lpi_dfm_mx0w0 = (readslicef_13_1_12((conv_u2u_12_13(area5_rsc_mgc_in_wire_d[13:2])
      + 13'b1111110101011))) & (readslicef_15_1_14((({1'b1 , (~ area5_rsc_mgc_in_wire_d)})
      + 15'b11100111)));
  assign else_14_else_land_lpi_dfm_mx1 = MUX_s_1_2_2({else_14_else_land_lpi_dfm_mx0w0
      , else_14_else_land_lpi_dfm}, or_dcpl_25);
  assign else_14_land_lpi_dfm = (else_14_if_acc_2_itm[11]) & (else_14_acc_itm[14]);
  assign nl_else_14_if_acc_2_itm = conv_u2u_11_12(area5_rsc_mgc_in_wire_d[13:3])
      + 12'b111110110101;
  assign else_14_if_acc_2_itm = nl_else_14_if_acc_2_itm[11:0];
  assign nl_else_14_acc_itm = ({1'b1 , (~ area5_rsc_mgc_in_wire_d)}) + 15'b101011111;
  assign else_14_acc_itm = nl_else_14_acc_itm[14:0];
  assign nl_if_14_acc_2_itm = conv_u2u_12_13(area5_rsc_mgc_in_wire_d[13:2]) + 13'b1111111001001;
  assign if_14_acc_2_itm = nl_if_14_acc_2_itm[12:0];
  assign else_17_else_land_lpi_dfm_mx0w0 = (readslicef_13_1_12((conv_u2u_12_13(area6_rsc_mgc_in_wire_d[13:2])
      + 13'b1111110101011))) & (readslicef_15_1_14((({1'b1 , (~ area6_rsc_mgc_in_wire_d)})
      + 15'b11100111)));
  assign else_17_else_land_lpi_dfm_mx1 = MUX_s_1_2_2({else_17_else_land_lpi_dfm_mx0w0
      , else_17_else_land_lpi_dfm}, or_dcpl_28);
  assign else_17_land_lpi_dfm = (else_17_if_acc_2_itm[11]) & (else_17_acc_itm[14]);
  assign nl_else_17_if_acc_2_itm = conv_u2u_11_12(area6_rsc_mgc_in_wire_d[13:3])
      + 12'b111110110101;
  assign else_17_if_acc_2_itm = nl_else_17_if_acc_2_itm[11:0];
  assign nl_else_17_acc_itm = ({1'b1 , (~ area6_rsc_mgc_in_wire_d)}) + 15'b101011111;
  assign else_17_acc_itm = nl_else_17_acc_itm[14:0];
  assign nl_if_17_acc_2_itm = conv_u2u_12_13(area6_rsc_mgc_in_wire_d[13:2]) + 13'b1111111001001;
  assign if_17_acc_2_itm = nl_if_17_acc_2_itm[12:0];
  assign else_20_else_land_lpi_dfm_mx0w0 = (readslicef_13_1_12((conv_u2u_12_13(area7_rsc_mgc_in_wire_d[13:2])
      + 13'b1111110101011))) & (readslicef_15_1_14((({1'b1 , (~ area7_rsc_mgc_in_wire_d)})
      + 15'b11100111)));
  assign else_20_else_land_lpi_dfm_mx1 = MUX_s_1_2_2({else_20_else_land_lpi_dfm_mx0w0
      , else_20_else_land_lpi_dfm}, or_dcpl_31);
  assign else_20_land_lpi_dfm = (else_20_if_acc_2_itm[11]) & (else_20_acc_itm[14]);
  assign nl_else_20_if_acc_2_itm = conv_u2u_11_12(area7_rsc_mgc_in_wire_d[13:3])
      + 12'b111110110101;
  assign else_20_if_acc_2_itm = nl_else_20_if_acc_2_itm[11:0];
  assign nl_else_20_acc_itm = ({1'b1 , (~ area7_rsc_mgc_in_wire_d)}) + 15'b101011111;
  assign else_20_acc_itm = nl_else_20_acc_itm[14:0];
  assign nl_if_20_acc_2_itm = conv_u2u_12_13(area7_rsc_mgc_in_wire_d[13:2]) + 13'b1111111001001;
  assign if_20_acc_2_itm = nl_if_20_acc_2_itm[12:0];
  assign else_23_else_land_lpi_dfm_mx0w0 = (readslicef_13_1_12((conv_u2u_12_13(area8_rsc_mgc_in_wire_d[13:2])
      + 13'b1111110101011))) & (readslicef_15_1_14((({1'b1 , (~ area8_rsc_mgc_in_wire_d)})
      + 15'b11100111)));
  assign else_23_else_land_lpi_dfm_mx1 = MUX_s_1_2_2({else_23_else_land_lpi_dfm_mx0w0
      , else_23_else_land_lpi_dfm}, or_dcpl_34);
  assign else_23_land_lpi_dfm = (else_23_if_acc_2_itm[11]) & (else_23_acc_itm[14]);
  assign nl_else_23_if_acc_2_itm = conv_u2u_11_12(area8_rsc_mgc_in_wire_d[13:3])
      + 12'b111110110101;
  assign else_23_if_acc_2_itm = nl_else_23_if_acc_2_itm[11:0];
  assign nl_else_23_acc_itm = ({1'b1 , (~ area8_rsc_mgc_in_wire_d)}) + 15'b101011111;
  assign else_23_acc_itm = nl_else_23_acc_itm[14:0];
  assign nl_if_23_acc_2_itm = conv_u2u_12_13(area8_rsc_mgc_in_wire_d[13:2]) + 13'b1111111001001;
  assign if_23_acc_2_itm = nl_if_23_acc_2_itm[12:0];
  assign else_26_else_land_lpi_dfm_mx0w0 = (readslicef_13_1_12((conv_u2u_12_13(area9_rsc_mgc_in_wire_d[13:2])
      + 13'b1111110101011))) & (readslicef_15_1_14((({1'b1 , (~ area9_rsc_mgc_in_wire_d)})
      + 15'b11100111)));
  assign else_26_else_land_lpi_dfm_mx1 = MUX_s_1_2_2({else_26_else_land_lpi_dfm_mx0w0
      , else_26_else_land_lpi_dfm}, or_dcpl_37);
  assign else_26_land_lpi_dfm = (else_26_if_acc_2_itm[11]) & (else_26_acc_itm[14]);
  assign nl_else_26_if_acc_2_itm = conv_u2u_11_12(area9_rsc_mgc_in_wire_d[13:3])
      + 12'b111110110101;
  assign else_26_if_acc_2_itm = nl_else_26_if_acc_2_itm[11:0];
  assign nl_else_26_acc_itm = ({1'b1 , (~ area9_rsc_mgc_in_wire_d)}) + 15'b101011111;
  assign else_26_acc_itm = nl_else_26_acc_itm[14:0];
  assign nl_if_26_acc_2_itm = conv_u2u_12_13(area9_rsc_mgc_in_wire_d[13:2]) + 13'b1111111001001;
  assign if_26_acc_2_itm = nl_if_26_acc_2_itm[12:0];
  assign land_9_lpi_dfm_1 = (if_26_acc_2_itm[12]) & (acc_9_itm[14]);
  assign land_8_lpi_dfm_1 = (if_23_acc_2_itm[12]) & (acc_8_itm[14]);
  assign land_7_lpi_dfm_1 = (if_20_acc_2_itm[12]) & (acc_7_itm[14]);
  assign land_6_lpi_dfm_1 = (if_17_acc_2_itm[12]) & (acc_6_itm[14]);
  assign land_5_lpi_dfm_1 = (if_14_acc_2_itm[12]) & (acc_5_itm[14]);
  assign land_4_lpi_dfm_1 = (if_11_acc_2_itm[12]) & (acc_4_itm[14]);
  assign nl_acc_9_itm = ({1'b1 , (~ area9_rsc_mgc_in_wire_d)}) + 15'b1100101;
  assign acc_9_itm = nl_acc_9_itm[14:0];
  assign nl_acc_8_itm = ({1'b1 , (~ area8_rsc_mgc_in_wire_d)}) + 15'b1100101;
  assign acc_8_itm = nl_acc_8_itm[14:0];
  assign nl_acc_7_itm = ({1'b1 , (~ area7_rsc_mgc_in_wire_d)}) + 15'b1100101;
  assign acc_7_itm = nl_acc_7_itm[14:0];
  assign nl_acc_6_itm = ({1'b1 , (~ area6_rsc_mgc_in_wire_d)}) + 15'b1100101;
  assign acc_6_itm = nl_acc_6_itm[14:0];
  assign nl_acc_5_itm = ({1'b1 , (~ area5_rsc_mgc_in_wire_d)}) + 15'b1100101;
  assign acc_5_itm = nl_acc_5_itm[14:0];
  assign nl_acc_4_itm = ({1'b1 , (~ area4_rsc_mgc_in_wire_d)}) + 15'b1100101;
  assign acc_4_itm = nl_acc_4_itm[14:0];
  assign and_6_ssc = else_8_land_lpi_dfm & (~ land_3_lpi_dfm);
  assign else_8_and_ssc = else_8_else_land_lpi_dfm_mx0 & (~ else_8_land_lpi_dfm)
      & (~ land_3_lpi_dfm);
  assign nor_3_ssc = ~(else_8_else_land_lpi_dfm_mx0 | else_8_land_lpi_dfm | land_3_lpi_dfm);
  assign land_3_lpi_dfm = (if_8_acc_2_itm[12]) & (acc_3_itm[14]);
  assign nl_acc_3_itm = ({1'b1 , (~ area3_rsc_mgc_in_wire_d)}) + 15'b1100101;
  assign acc_3_itm = nl_acc_3_itm[14:0];
  assign and_4_ssc = else_5_land_lpi_dfm & (~ land_2_lpi_dfm);
  assign else_5_and_ssc = else_5_else_land_lpi_dfm_mx0 & (~ else_5_land_lpi_dfm)
      & (~ land_2_lpi_dfm);
  assign nor_2_ssc = ~(else_5_else_land_lpi_dfm_mx0 | else_5_land_lpi_dfm | land_2_lpi_dfm);
  assign land_2_lpi_dfm = (if_5_acc_2_itm[12]) & (acc_2_itm[14]);
  assign nl_acc_2_itm = ({1'b1 , (~ area2_rsc_mgc_in_wire_d)}) + 15'b1100101;
  assign acc_2_itm = nl_acc_2_itm[14:0];
  assign and_2_ssc = else_2_land_lpi_dfm & (~ land_1_lpi_dfm);
  assign else_2_and_ssc = else_2_else_land_lpi_dfm_mx0 & (~ else_2_land_lpi_dfm)
      & (~ land_1_lpi_dfm);
  assign nor_1_ssc = ~(else_2_else_land_lpi_dfm_mx0 | else_2_land_lpi_dfm | land_1_lpi_dfm);
  assign land_1_lpi_dfm = (if_2_acc_2_itm[12]) & (acc_1_itm[14]);
  assign nl_acc_1_itm = ({1'b1 , (~ area1_rsc_mgc_in_wire_d)}) + 15'b1100101;
  assign acc_1_itm = nl_acc_1_itm[14:0];
  assign and_1_ssc = else_land_lpi_dfm & (~ land_lpi_dfm);
  assign land_lpi_dfm = (if_acc_2_itm[12]) & (acc_itm[14]);
  assign nl_acc_itm = ({1'b1 , (~ area0_rsc_mgc_in_wire_d)}) + 15'b1100101;
  assign acc_itm = nl_acc_itm[14:0];
  assign nl_tot_value_1_sva_40 = ({mux1h_3_psp_sg6 , mux1h_3_psp_sg5 , mux1h_3_psp_sg4
      , mux1h_3_psp_sg3_sg1 , mux1h_3_psp_sg3_1 , mux1h_3_psp_sg2 , mux1h_3_psp_sg1
      , mux1h_3_psp_1}) + 9'b101;
  assign tot_value_1_sva_40 = nl_tot_value_1_sva_40[8:0];
  assign nl_tot_value_1_sva_14_sg1 = ({mux1h_3_psp_sg6 , mux1h_3_psp_sg5 , mux1h_3_psp_sg4
      , mux1h_3_psp_sg3_sg1 , mux1h_3_psp_sg3_1 , mux1h_3_psp_sg2 , mux1h_3_psp_sg1})
      + 8'b11001;
  assign tot_value_1_sva_14_sg1 = nl_tot_value_1_sva_14_sg1[7:0];
  assign nl_tot_value_1_sva_15_sg2 = ({mux1h_3_psp_sg6 , mux1h_3_psp_sg5 , mux1h_3_psp_sg4
      , mux1h_3_psp_sg3_sg1 , mux1h_3_psp_sg3_1 , mux1h_3_psp_sg2}) + 7'b11001;
  assign tot_value_1_sva_15_sg2 = nl_tot_value_1_sva_15_sg2[6:0];
  assign nl_tot_value_1_sva_43 = ({mux1h_4_psp_sg6 , mux1h_4_psp_sg5 , mux1h_4_psp_sg4
      , mux1h_4_psp_sg3_sg1 , mux1h_4_psp_sg3_1 , mux1h_4_psp_sg2 , mux1h_4_psp_sg1
      , mux1h_4_psp_1_mx0}) + 9'b101;
  assign tot_value_1_sva_43 = nl_tot_value_1_sva_43[8:0];
  assign mux1h_4_psp_sg6 = MUX1HOT_s_1_4_2({(tot_value_1_sva_14_sg1[7]) , (tot_value_1_sva_15_sg2[6])
      , mux1h_3_psp_sg6 , (tot_value_1_sva_40[8])}, {and_8_itm , else_11_and_itm
      , nor_4_itm , land_4_lpi_dfm});
  assign mux1h_4_psp_sg5 = MUX1HOT_s_1_4_2({(tot_value_1_sva_14_sg1[6]) , (tot_value_1_sva_15_sg2[5])
      , mux1h_3_psp_sg5 , (tot_value_1_sva_40[7])}, {and_8_itm , else_11_and_itm
      , nor_4_itm , land_4_lpi_dfm});
  assign mux1h_4_psp_sg4 = MUX1HOT_v_2_4_2({(tot_value_1_sva_14_sg1[5:4]) , (tot_value_1_sva_15_sg2[4:3])
      , mux1h_3_psp_sg4 , (tot_value_1_sva_40[6:5])}, {and_8_itm , else_11_and_itm
      , nor_4_itm , land_4_lpi_dfm});
  assign mux1h_4_psp_sg3_sg1 = MUX1HOT_s_1_4_2({(tot_value_1_sva_14_sg1[3]) , (tot_value_1_sva_15_sg2[2])
      , mux1h_3_psp_sg3_sg1 , (tot_value_1_sva_40[4])}, {and_8_itm , else_11_and_itm
      , nor_4_itm , land_4_lpi_dfm});
  assign mux1h_4_psp_sg3_1 = MUX1HOT_s_1_4_2({(tot_value_1_sva_14_sg1[2]) , (tot_value_1_sva_15_sg2[1])
      , mux1h_3_psp_sg3_1 , (tot_value_1_sva_40[3])}, {and_8_itm , else_11_and_itm
      , nor_4_itm , land_4_lpi_dfm});
  assign mux1h_4_psp_sg2 = MUX1HOT_s_1_4_2({(tot_value_1_sva_14_sg1[1]) , (tot_value_1_sva_15_sg2[0])
      , mux1h_3_psp_sg2 , (tot_value_1_sva_40[2])}, {and_8_itm , else_11_and_itm
      , nor_4_itm , land_4_lpi_dfm});
  assign mux1h_4_psp_sg1 = MUX1HOT_s_1_3_2({(tot_value_1_sva_14_sg1[0]) , mux1h_3_psp_sg1
      , (tot_value_1_sva_40[1])}, {and_8_itm , (else_11_and_itm | nor_4_itm) , land_4_lpi_dfm});
  assign mux1h_4_psp_1_mx0 = MUX_s_1_2_2({mux1h_3_psp_1 , (tot_value_1_sva_40[0])},
      land_4_lpi_dfm);
  assign nl_tot_value_1_sva_17_sg1 = conv_u2u_8_9({mux1h_4_psp_sg6 , mux1h_4_psp_sg5
      , mux1h_4_psp_sg4 , mux1h_4_psp_sg3_sg1 , mux1h_4_psp_sg3_1 , mux1h_4_psp_sg2
      , mux1h_4_psp_sg1}) + 9'b11001;
  assign tot_value_1_sva_17_sg1 = nl_tot_value_1_sva_17_sg1[8:0];
  assign nl_tot_value_1_sva_19 = ({tot_value_1_lpi_dfm_17_sg7 , tot_value_1_lpi_dfm_17_sg6
      , tot_value_1_lpi_dfm_17_sg5 , tot_value_1_lpi_dfm_17_sg4 , tot_value_1_lpi_dfm_17_sg3_sg1
      , tot_value_1_lpi_dfm_17_sg3_1 , tot_value_1_lpi_dfm_17_sg2 , tot_value_1_lpi_dfm_17_sg1
      , tot_value_1_lpi_dfm_31_mx0}) + 10'b101;
  assign tot_value_1_sva_19 = nl_tot_value_1_sva_19[9:0];
  assign mux_58_nl = MUX_s_1_2_2({(tot_value_1_sva_17_sg1[8]) , (z_out_2[7])}, else_14_and_ssc);
  assign tot_value_1_lpi_dfm_17_sg7 = (mux_58_nl) & (~(nor_5_ssc | land_5_lpi_dfm));
  assign tot_value_1_lpi_dfm_17_sg6 = MUX1HOT_s_1_4_2({(tot_value_1_sva_17_sg1[7])
      , (z_out_2[6]) , mux1h_4_psp_sg6 , (tot_value_1_sva_43[8])}, {and_10_itm ,
      else_14_and_ssc , nor_5_ssc , land_5_lpi_dfm});
  assign tot_value_1_lpi_dfm_17_sg5 = MUX1HOT_s_1_4_2({(tot_value_1_sva_17_sg1[6])
      , (z_out_2[5]) , mux1h_4_psp_sg5 , (tot_value_1_sva_43[7])}, {and_10_itm ,
      else_14_and_ssc , nor_5_ssc , land_5_lpi_dfm});
  assign tot_value_1_lpi_dfm_17_sg4 = MUX1HOT_v_2_4_2({(tot_value_1_sva_17_sg1[5:4])
      , (z_out_2[4:3]) , mux1h_4_psp_sg4 , (tot_value_1_sva_43[6:5])}, {and_10_itm
      , else_14_and_ssc , nor_5_ssc , land_5_lpi_dfm});
  assign tot_value_1_lpi_dfm_17_sg3_sg1 = MUX1HOT_s_1_4_2({(tot_value_1_sva_17_sg1[3])
      , (z_out_2[2]) , mux1h_4_psp_sg3_sg1 , (tot_value_1_sva_43[4])}, {and_10_itm
      , else_14_and_ssc , nor_5_ssc , land_5_lpi_dfm});
  assign tot_value_1_lpi_dfm_17_sg3_1 = MUX1HOT_s_1_4_2({(tot_value_1_sva_17_sg1[2])
      , (z_out_2[1]) , mux1h_4_psp_sg3_1 , (tot_value_1_sva_43[3])}, {and_10_itm
      , else_14_and_ssc , nor_5_ssc , land_5_lpi_dfm});
  assign tot_value_1_lpi_dfm_17_sg2 = MUX1HOT_s_1_4_2({(tot_value_1_sva_17_sg1[1])
      , (z_out_2[0]) , mux1h_4_psp_sg2 , (tot_value_1_sva_43[2])}, {and_10_itm ,
      else_14_and_ssc , nor_5_ssc , land_5_lpi_dfm});
  assign tot_value_1_lpi_dfm_17_sg1 = MUX1HOT_s_1_3_2({(tot_value_1_sva_17_sg1[0])
      , mux1h_4_psp_sg1 , (tot_value_1_sva_43[1])}, {and_10_itm , (else_14_and_ssc
      | nor_5_ssc) , land_5_lpi_dfm});
  assign tot_value_1_lpi_dfm_31_mx0 = MUX_s_1_2_2({mux1h_4_psp_1_mx0 , (tot_value_1_sva_43[0])},
      land_5_lpi_dfm);
  assign nl_tot_value_1_sva_20_sg1 = ({tot_value_1_lpi_dfm_17_sg7 , tot_value_1_lpi_dfm_17_sg6
      , tot_value_1_lpi_dfm_17_sg5 , tot_value_1_lpi_dfm_17_sg4 , tot_value_1_lpi_dfm_17_sg3_sg1
      , tot_value_1_lpi_dfm_17_sg3_1 , tot_value_1_lpi_dfm_17_sg2 , tot_value_1_lpi_dfm_17_sg1})
      + 9'b11001;
  assign tot_value_1_sva_20_sg1 = nl_tot_value_1_sva_20_sg1[8:0];
  assign nl_tot_value_1_sva_21_sg2 = ({tot_value_1_lpi_dfm_17_sg7 , tot_value_1_lpi_dfm_17_sg6
      , tot_value_1_lpi_dfm_17_sg5 , tot_value_1_lpi_dfm_17_sg4 , tot_value_1_lpi_dfm_17_sg3_sg1
      , tot_value_1_lpi_dfm_17_sg3_1 , tot_value_1_lpi_dfm_17_sg2}) + 8'b11001;
  assign tot_value_1_sva_21_sg2 = nl_tot_value_1_sva_21_sg2[7:0];
  assign nl_tot_value_1_sva_22 = ({tot_value_1_lpi_dfm_20_sg7 , tot_value_1_lpi_dfm_20_sg6
      , tot_value_1_lpi_dfm_20_sg5 , tot_value_1_lpi_dfm_20_sg4 , tot_value_1_lpi_dfm_20_sg3_sg1
      , tot_value_1_lpi_dfm_20_sg3_1 , tot_value_1_lpi_dfm_20_sg2 , tot_value_1_lpi_dfm_20_sg1
      , tot_value_1_lpi_dfm_32_mx0}) + 10'b101;
  assign tot_value_1_sva_22 = nl_tot_value_1_sva_22[9:0];
  assign tot_value_1_lpi_dfm_20_sg7 = MUX1HOT_s_1_4_2({(tot_value_1_sva_20_sg1[8])
      , (tot_value_1_sva_21_sg2[7]) , tot_value_1_lpi_dfm_17_sg7 , (tot_value_1_sva_19[9])},
      {and_12_itm , else_17_and_itm , nor_6_itm , land_6_lpi_dfm});
  assign tot_value_1_lpi_dfm_20_sg6 = MUX1HOT_s_1_4_2({(tot_value_1_sva_20_sg1[7])
      , (tot_value_1_sva_21_sg2[6]) , tot_value_1_lpi_dfm_17_sg6 , (tot_value_1_sva_19[8])},
      {and_12_itm , else_17_and_itm , nor_6_itm , land_6_lpi_dfm});
  assign tot_value_1_lpi_dfm_20_sg5 = MUX1HOT_s_1_4_2({(tot_value_1_sva_20_sg1[6])
      , (tot_value_1_sva_21_sg2[5]) , tot_value_1_lpi_dfm_17_sg5 , (tot_value_1_sva_19[7])},
      {and_12_itm , else_17_and_itm , nor_6_itm , land_6_lpi_dfm});
  assign tot_value_1_lpi_dfm_20_sg4 = MUX1HOT_v_2_4_2({(tot_value_1_sva_20_sg1[5:4])
      , (tot_value_1_sva_21_sg2[4:3]) , tot_value_1_lpi_dfm_17_sg4 , (tot_value_1_sva_19[6:5])},
      {and_12_itm , else_17_and_itm , nor_6_itm , land_6_lpi_dfm});
  assign tot_value_1_lpi_dfm_20_sg3_sg1 = MUX1HOT_s_1_4_2({(tot_value_1_sva_20_sg1[3])
      , (tot_value_1_sva_21_sg2[2]) , tot_value_1_lpi_dfm_17_sg3_sg1 , (tot_value_1_sva_19[4])},
      {and_12_itm , else_17_and_itm , nor_6_itm , land_6_lpi_dfm});
  assign tot_value_1_lpi_dfm_20_sg3_1 = MUX1HOT_s_1_4_2({(tot_value_1_sva_20_sg1[2])
      , (tot_value_1_sva_21_sg2[1]) , tot_value_1_lpi_dfm_17_sg3_1 , (tot_value_1_sva_19[3])},
      {and_12_itm , else_17_and_itm , nor_6_itm , land_6_lpi_dfm});
  assign tot_value_1_lpi_dfm_20_sg2 = MUX1HOT_s_1_4_2({(tot_value_1_sva_20_sg1[1])
      , (tot_value_1_sva_21_sg2[0]) , tot_value_1_lpi_dfm_17_sg2 , (tot_value_1_sva_19[2])},
      {and_12_itm , else_17_and_itm , nor_6_itm , land_6_lpi_dfm});
  assign tot_value_1_lpi_dfm_20_sg1 = MUX1HOT_s_1_3_2({(tot_value_1_sva_20_sg1[0])
      , tot_value_1_lpi_dfm_17_sg1 , (tot_value_1_sva_19[1])}, {and_12_itm , (else_17_and_itm
      | nor_6_itm) , land_6_lpi_dfm});
  assign tot_value_1_lpi_dfm_32_mx0 = MUX_s_1_2_2({tot_value_1_lpi_dfm_31_mx0 , (tot_value_1_sva_19[0])},
      land_6_lpi_dfm);
  assign nl_tot_value_1_sva_23_sg1 = ({tot_value_1_lpi_dfm_20_sg7 , tot_value_1_lpi_dfm_20_sg6
      , tot_value_1_lpi_dfm_20_sg5 , tot_value_1_lpi_dfm_20_sg4 , tot_value_1_lpi_dfm_20_sg3_sg1
      , tot_value_1_lpi_dfm_20_sg3_1 , tot_value_1_lpi_dfm_20_sg2 , tot_value_1_lpi_dfm_20_sg1})
      + 9'b11001;
  assign tot_value_1_sva_23_sg1 = nl_tot_value_1_sva_23_sg1[8:0];
  assign nl_tot_value_1_sva_24_sg2 = ({tot_value_1_lpi_dfm_20_sg7 , tot_value_1_lpi_dfm_20_sg6
      , tot_value_1_lpi_dfm_20_sg5 , tot_value_1_lpi_dfm_20_sg4 , tot_value_1_lpi_dfm_20_sg3_sg1
      , tot_value_1_lpi_dfm_20_sg3_1 , tot_value_1_lpi_dfm_20_sg2}) + 8'b11001;
  assign tot_value_1_sva_24_sg2 = nl_tot_value_1_sva_24_sg2[7:0];
  assign nl_tot_value_1_sva_25 = ({tot_value_1_lpi_dfm_23_sg7 , tot_value_1_lpi_dfm_23_sg6
      , tot_value_1_lpi_dfm_23_sg5 , tot_value_1_lpi_dfm_23_sg4 , tot_value_1_lpi_dfm_23_sg3_sg1
      , tot_value_1_lpi_dfm_23_sg3_1 , tot_value_1_lpi_dfm_23_sg2 , tot_value_1_lpi_dfm_23_sg1
      , tot_value_1_lpi_dfm_33_mx0}) + 10'b101;
  assign tot_value_1_sva_25 = nl_tot_value_1_sva_25[9:0];
  assign tot_value_1_lpi_dfm_23_sg7 = MUX1HOT_s_1_4_2({(tot_value_1_sva_23_sg1[8])
      , (tot_value_1_sva_24_sg2[7]) , tot_value_1_lpi_dfm_20_sg7 , (tot_value_1_sva_22[9])},
      {and_14_itm , else_20_and_itm , nor_7_itm , land_7_lpi_dfm});
  assign tot_value_1_lpi_dfm_23_sg6 = MUX1HOT_s_1_4_2({(tot_value_1_sva_23_sg1[7])
      , (tot_value_1_sva_24_sg2[6]) , tot_value_1_lpi_dfm_20_sg6 , (tot_value_1_sva_22[8])},
      {and_14_itm , else_20_and_itm , nor_7_itm , land_7_lpi_dfm});
  assign tot_value_1_lpi_dfm_23_sg5 = MUX1HOT_s_1_4_2({(tot_value_1_sva_23_sg1[6])
      , (tot_value_1_sva_24_sg2[5]) , tot_value_1_lpi_dfm_20_sg5 , (tot_value_1_sva_22[7])},
      {and_14_itm , else_20_and_itm , nor_7_itm , land_7_lpi_dfm});
  assign tot_value_1_lpi_dfm_23_sg4 = MUX1HOT_v_2_4_2({(tot_value_1_sva_23_sg1[5:4])
      , (tot_value_1_sva_24_sg2[4:3]) , tot_value_1_lpi_dfm_20_sg4 , (tot_value_1_sva_22[6:5])},
      {and_14_itm , else_20_and_itm , nor_7_itm , land_7_lpi_dfm});
  assign tot_value_1_lpi_dfm_23_sg3_sg1 = MUX1HOT_s_1_4_2({(tot_value_1_sva_23_sg1[3])
      , (tot_value_1_sva_24_sg2[2]) , tot_value_1_lpi_dfm_20_sg3_sg1 , (tot_value_1_sva_22[4])},
      {and_14_itm , else_20_and_itm , nor_7_itm , land_7_lpi_dfm});
  assign tot_value_1_lpi_dfm_23_sg3_1 = MUX1HOT_s_1_4_2({(tot_value_1_sva_23_sg1[2])
      , (tot_value_1_sva_24_sg2[1]) , tot_value_1_lpi_dfm_20_sg3_1 , (tot_value_1_sva_22[3])},
      {and_14_itm , else_20_and_itm , nor_7_itm , land_7_lpi_dfm});
  assign tot_value_1_lpi_dfm_23_sg2 = MUX1HOT_s_1_4_2({(tot_value_1_sva_23_sg1[1])
      , (tot_value_1_sva_24_sg2[0]) , tot_value_1_lpi_dfm_20_sg2 , (tot_value_1_sva_22[2])},
      {and_14_itm , else_20_and_itm , nor_7_itm , land_7_lpi_dfm});
  assign tot_value_1_lpi_dfm_23_sg1 = MUX1HOT_s_1_3_2({(tot_value_1_sva_23_sg1[0])
      , tot_value_1_lpi_dfm_20_sg1 , (tot_value_1_sva_22[1])}, {and_14_itm , (else_20_and_itm
      | nor_7_itm) , land_7_lpi_dfm});
  assign tot_value_1_lpi_dfm_33_mx0 = MUX_s_1_2_2({tot_value_1_lpi_dfm_32_mx0 , (tot_value_1_sva_22[0])},
      land_7_lpi_dfm);
  assign nl_tot_value_1_sva_26_sg1 = ({tot_value_1_lpi_dfm_23_sg7 , tot_value_1_lpi_dfm_23_sg6
      , tot_value_1_lpi_dfm_23_sg5 , tot_value_1_lpi_dfm_23_sg4 , tot_value_1_lpi_dfm_23_sg3_sg1
      , tot_value_1_lpi_dfm_23_sg3_1 , tot_value_1_lpi_dfm_23_sg2 , tot_value_1_lpi_dfm_23_sg1})
      + 9'b11001;
  assign tot_value_1_sva_26_sg1 = nl_tot_value_1_sva_26_sg1[8:0];
  assign nl_tot_value_1_sva_28 = ({tot_value_1_lpi_dfm_26_sg2 , tot_value_1_lpi_dfm_26_sg1
      , tot_value_1_lpi_dfm_34_mx0}) + 10'b101;
  assign tot_value_1_sva_28 = nl_tot_value_1_sva_28[9:0];
  assign tot_value_1_lpi_dfm_26_sg2 = MUX1HOT_v_8_4_2({(tot_value_1_sva_26_sg1[8:1])
      , (z_out_1[7:0]) , ({tot_value_1_lpi_dfm_23_sg7 , tot_value_1_lpi_dfm_23_sg6
      , tot_value_1_lpi_dfm_23_sg5 , tot_value_1_lpi_dfm_23_sg4 , tot_value_1_lpi_dfm_23_sg3_sg1
      , tot_value_1_lpi_dfm_23_sg3_1 , tot_value_1_lpi_dfm_23_sg2}) , (tot_value_1_sva_25[9:2])},
      {and_16_itm , else_23_and_itm , nor_8_itm , land_8_lpi_dfm});
  assign tot_value_1_lpi_dfm_26_sg1 = MUX1HOT_s_1_3_2({(tot_value_1_sva_26_sg1[0])
      , tot_value_1_lpi_dfm_23_sg1 , (tot_value_1_sva_25[1])}, {and_16_itm , (else_23_and_itm
      | nor_8_itm) , land_8_lpi_dfm});
  assign tot_value_1_lpi_dfm_34_mx0 = MUX_s_1_2_2({tot_value_1_lpi_dfm_33_mx0 , (tot_value_1_sva_25[0])},
      land_8_lpi_dfm);
  assign and_dcpl = (acc_itm[14]) & (if_acc_2_itm[12]);
  assign or_28_cse = and_dcpl | ((else_acc_itm[14]) & (else_if_acc_2_itm[11]));
  assign and_dcpl_5 = (else_2_acc_itm[14]) & (else_2_if_acc_2_itm[11]);
  assign or_31_cse = ((acc_1_itm[14]) & (if_2_acc_2_itm[12])) | and_dcpl_5;
  assign or_dcpl_12 = ~((acc_1_itm[14]) & (if_2_acc_2_itm[12]));
  assign or_36_cse = ((acc_2_itm[14]) & (if_5_acc_2_itm[12])) | ((else_5_acc_itm[14])
      & (else_5_if_acc_2_itm[11]));
  assign or_40_cse = ((acc_3_itm[14]) & (if_8_acc_2_itm[12])) | ((else_8_acc_itm[14])
      & (else_8_if_acc_2_itm[11]));
  assign or_dcpl_22 = ((acc_4_itm[14]) & (if_11_acc_2_itm[12])) | ((else_11_acc_itm[14])
      & (else_11_if_acc_2_itm[11]));
  assign or_dcpl_25 = ((acc_5_itm[14]) & (if_14_acc_2_itm[12])) | ((else_14_acc_itm[14])
      & (else_14_if_acc_2_itm[11]));
  assign or_dcpl_28 = ((acc_6_itm[14]) & (if_17_acc_2_itm[12])) | ((else_17_acc_itm[14])
      & (else_17_if_acc_2_itm[11]));
  assign or_dcpl_31 = ((acc_7_itm[14]) & (if_20_acc_2_itm[12])) | ((else_20_acc_itm[14])
      & (else_20_if_acc_2_itm[11]));
  assign or_dcpl_34 = ((acc_8_itm[14]) & (if_23_acc_2_itm[12])) | ((else_23_acc_itm[14])
      & (else_23_if_acc_2_itm[11]));
  assign or_dcpl_37 = ((acc_9_itm[14]) & (if_26_acc_2_itm[12])) | ((else_26_acc_itm[14])
      & (else_26_if_acc_2_itm[11]));
  assign mux_65_cse = MUX_v_2_2_2({2'b1 , 2'b10}, fsm_output[1]);
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      else_else_land_lpi_dfm <= 1'b0;
      else_2_else_land_lpi_dfm <= 1'b0;
      else_5_else_land_lpi_dfm <= 1'b0;
      else_8_else_land_lpi_dfm <= 1'b0;
      mux1h_3_psp_1 <= 1'b0;
      else_11_else_land_lpi_dfm <= 1'b0;
      else_14_else_land_lpi_dfm <= 1'b0;
      else_17_else_land_lpi_dfm <= 1'b0;
      else_20_else_land_lpi_dfm <= 1'b0;
      else_23_else_land_lpi_dfm <= 1'b0;
      else_26_else_land_lpi_dfm <= 1'b0;
      mux1h_3_psp_sg6 <= 1'b0;
      mux1h_3_psp_sg5 <= 1'b0;
      mux1h_3_psp_sg4 <= 2'b0;
      mux1h_3_psp_sg3_sg1 <= 1'b0;
      mux1h_3_psp_sg3_1 <= 1'b0;
      mux1h_3_psp_sg2 <= 1'b0;
      mux1h_3_psp_sg1 <= 1'b0;
      and_18_itm <= 1'b0;
      else_26_and_itm <= 1'b0;
      nor_9_itm <= 1'b0;
      land_9_lpi_dfm <= 1'b0;
      and_16_itm <= 1'b0;
      else_23_and_itm <= 1'b0;
      nor_8_itm <= 1'b0;
      land_8_lpi_dfm <= 1'b0;
      and_14_itm <= 1'b0;
      else_20_and_itm <= 1'b0;
      nor_7_itm <= 1'b0;
      land_7_lpi_dfm <= 1'b0;
      and_12_itm <= 1'b0;
      else_17_and_itm <= 1'b0;
      nor_6_itm <= 1'b0;
      land_6_lpi_dfm <= 1'b0;
      else_14_and_ssc <= 1'b0;
      nor_5_ssc <= 1'b0;
      land_5_lpi_dfm <= 1'b0;
      and_10_itm <= 1'b0;
      and_8_itm <= 1'b0;
      else_11_and_itm <= 1'b0;
      nor_4_itm <= 1'b0;
      land_4_lpi_dfm <= 1'b0;
      value_out_rsc_mgc_out_stdreg_d <= 14'b0;
    end
    else begin
      if ( en ) begin
        else_else_land_lpi_dfm <= MUX_s_1_2_2({else_else_land_lpi_dfm_mx0w0 , else_else_land_lpi_dfm},
            or_28_cse | (~ (fsm_output[0])));
        else_2_else_land_lpi_dfm <= MUX_s_1_2_2({else_2_else_land_lpi_dfm_mx0w0 ,
            else_2_else_land_lpi_dfm}, or_31_cse | (~ (fsm_output[0])));
        else_5_else_land_lpi_dfm <= MUX_s_1_2_2({else_5_else_land_lpi_dfm_mx0w0 ,
            else_5_else_land_lpi_dfm}, or_36_cse | (~ (fsm_output[0])));
        else_8_else_land_lpi_dfm <= MUX_s_1_2_2({else_8_else_land_lpi_dfm_mx0w0 ,
            else_8_else_land_lpi_dfm}, or_40_cse | (~ (fsm_output[0])));
        mux1h_3_psp_1 <= MUX_s_1_2_2({(z_out_3[0]) , mux1h_2_psp_1_mx0}, ~((acc_3_itm[14])
            & (if_8_acc_2_itm[12])));
        else_11_else_land_lpi_dfm <= MUX_s_1_2_2({else_11_else_land_lpi_dfm_mx0w0
            , else_11_else_land_lpi_dfm}, or_dcpl_22 | (~ (fsm_output[0])));
        else_14_else_land_lpi_dfm <= MUX_s_1_2_2({else_14_else_land_lpi_dfm_mx0w0
            , else_14_else_land_lpi_dfm}, or_dcpl_25 | (~ (fsm_output[0])));
        else_17_else_land_lpi_dfm <= MUX_s_1_2_2({else_17_else_land_lpi_dfm_mx0w0
            , else_17_else_land_lpi_dfm}, or_dcpl_28 | (~ (fsm_output[0])));
        else_20_else_land_lpi_dfm <= MUX_s_1_2_2({else_20_else_land_lpi_dfm_mx0w0
            , else_20_else_land_lpi_dfm}, or_dcpl_31 | (~ (fsm_output[0])));
        else_23_else_land_lpi_dfm <= MUX_s_1_2_2({else_23_else_land_lpi_dfm_mx0w0
            , else_23_else_land_lpi_dfm}, or_dcpl_34 | (~ (fsm_output[0])));
        else_26_else_land_lpi_dfm <= MUX_s_1_2_2({else_26_else_land_lpi_dfm_mx0w0
            , else_26_else_land_lpi_dfm}, or_dcpl_37 | (~ (fsm_output[0])));
        mux1h_3_psp_sg6 <= MUX1HOT_s_1_4_2({(z_out[7]) , (tot_value_1_sva_12_sg2[6])
            , and_21_psp , (z_out_3[8])}, {and_6_ssc , else_8_and_ssc , nor_3_ssc
            , land_3_lpi_dfm});
        mux1h_3_psp_sg5 <= MUX1HOT_s_1_4_2({(z_out[6]) , (tot_value_1_sva_12_sg2[5])
            , mux1h_2_psp_sg5 , (z_out_3[7])}, {and_6_ssc , else_8_and_ssc , nor_3_ssc
            , land_3_lpi_dfm});
        mux1h_3_psp_sg4 <= MUX1HOT_v_2_4_2({(z_out[5:4]) , (tot_value_1_sva_12_sg2[4:3])
            , mux1h_2_psp_sg4 , (z_out_3[6:5])}, {and_6_ssc , else_8_and_ssc , nor_3_ssc
            , land_3_lpi_dfm});
        mux1h_3_psp_sg3_sg1 <= MUX1HOT_s_1_4_2({(z_out[3]) , (tot_value_1_sva_12_sg2[2])
            , mux1h_2_psp_sg3_sg1 , (z_out_3[4])}, {and_6_ssc , else_8_and_ssc ,
            nor_3_ssc , land_3_lpi_dfm});
        mux1h_3_psp_sg3_1 <= MUX1HOT_s_1_4_2({(z_out[2]) , (tot_value_1_sva_12_sg2[1])
            , mux1h_2_psp_sg3_1 , (z_out_3[3])}, {and_6_ssc , else_8_and_ssc , nor_3_ssc
            , land_3_lpi_dfm});
        mux1h_3_psp_sg2 <= MUX1HOT_s_1_4_2({(z_out[1]) , (tot_value_1_sva_12_sg2[0])
            , mux1h_2_psp_sg2 , (z_out_3[2])}, {and_6_ssc , else_8_and_ssc , nor_3_ssc
            , land_3_lpi_dfm});
        mux1h_3_psp_sg1 <= MUX1HOT_s_1_3_2({(z_out[0]) , mux1h_2_psp_sg1 , (z_out_3[1])},
            {and_6_ssc , (else_8_and_ssc | nor_3_ssc) , land_3_lpi_dfm});
        and_18_itm <= else_26_land_lpi_dfm & (~ land_9_lpi_dfm_1);
        else_26_and_itm <= else_26_else_land_lpi_dfm_mx1 & (~ else_26_land_lpi_dfm)
            & (~ land_9_lpi_dfm_1);
        nor_9_itm <= ~(else_26_else_land_lpi_dfm_mx1 | else_26_land_lpi_dfm | land_9_lpi_dfm_1);
        land_9_lpi_dfm <= land_9_lpi_dfm_1;
        and_16_itm <= else_23_land_lpi_dfm & (~ land_8_lpi_dfm_1);
        else_23_and_itm <= else_23_else_land_lpi_dfm_mx1 & (~ else_23_land_lpi_dfm)
            & (~ land_8_lpi_dfm_1);
        nor_8_itm <= ~(else_23_else_land_lpi_dfm_mx1 | else_23_land_lpi_dfm | land_8_lpi_dfm_1);
        land_8_lpi_dfm <= land_8_lpi_dfm_1;
        and_14_itm <= else_20_land_lpi_dfm & (~ land_7_lpi_dfm_1);
        else_20_and_itm <= else_20_else_land_lpi_dfm_mx1 & (~ else_20_land_lpi_dfm)
            & (~ land_7_lpi_dfm_1);
        nor_7_itm <= ~(else_20_else_land_lpi_dfm_mx1 | else_20_land_lpi_dfm | land_7_lpi_dfm_1);
        land_7_lpi_dfm <= land_7_lpi_dfm_1;
        and_12_itm <= else_17_land_lpi_dfm & (~ land_6_lpi_dfm_1);
        else_17_and_itm <= else_17_else_land_lpi_dfm_mx1 & (~ else_17_land_lpi_dfm)
            & (~ land_6_lpi_dfm_1);
        nor_6_itm <= ~(else_17_else_land_lpi_dfm_mx1 | else_17_land_lpi_dfm | land_6_lpi_dfm_1);
        land_6_lpi_dfm <= land_6_lpi_dfm_1;
        else_14_and_ssc <= else_14_else_land_lpi_dfm_mx1 & (~ else_14_land_lpi_dfm)
            & (~ land_5_lpi_dfm_1);
        nor_5_ssc <= ~(else_14_else_land_lpi_dfm_mx1 | else_14_land_lpi_dfm | land_5_lpi_dfm_1);
        land_5_lpi_dfm <= land_5_lpi_dfm_1;
        and_10_itm <= else_14_land_lpi_dfm & (~ land_5_lpi_dfm_1);
        and_8_itm <= else_11_land_lpi_dfm & (~ land_4_lpi_dfm_1);
        else_11_and_itm <= else_11_else_land_lpi_dfm_mx1 & (~ else_11_land_lpi_dfm)
            & (~ land_4_lpi_dfm_1);
        nor_4_itm <= ~(else_11_else_land_lpi_dfm_mx1 | else_11_land_lpi_dfm | land_4_lpi_dfm_1);
        land_4_lpi_dfm <= land_4_lpi_dfm_1;
        value_out_rsc_mgc_out_stdreg_d <= MUX_v_14_2_2({value_out_rsc_mgc_out_stdreg_d
            , ({4'b0 , (MUX1HOT_v_8_4_2({(z_out_3[8:1]) , (z_out[7:0]) , tot_value_1_lpi_dfm_26_sg2
            , (tot_value_1_sva_28[9:2])}, {and_18_itm , else_26_and_itm , nor_9_itm
            , land_9_lpi_dfm})) , (MUX1HOT_s_1_3_2({(z_out_3[0]) , tot_value_1_lpi_dfm_26_sg1
            , (tot_value_1_sva_28[1])}, {and_18_itm , (else_26_and_itm | nor_9_itm)
            , land_9_lpi_dfm})) , (MUX_s_1_2_2({tot_value_1_lpi_dfm_34_mx0 , (tot_value_1_sva_28[0])},
            land_9_lpi_dfm))})}, fsm_output[1]);
      end
    end
  end
  assign mux_69_nl = MUX_v_8_2_2({tot_value_1_lpi_dfm_26_sg2 , ({and_21_psp , mux1h_2_psp_sg5
      , mux1h_2_psp_sg4 , mux1h_2_psp_sg3_sg1 , mux1h_2_psp_sg3_1 , mux1h_2_psp_sg2
      , mux1h_2_psp_sg1})}, fsm_output[0]);
  assign nl_z_out = conv_u2u_8_9(mux_69_nl) + 9'b11001;
  assign z_out = nl_z_out[8:0];
  assign mux_64_nl = MUX_s_1_2_2({and_psp , tot_value_1_lpi_dfm_23_sg7}, fsm_output[1]);
  assign mux_70_nl = MUX_s_1_2_2({(mux1h_1_psp_sg4[1]) , tot_value_1_lpi_dfm_23_sg6},
      fsm_output[1]);
  assign mux_71_nl = MUX_s_1_2_2({(mux1h_1_psp_sg4[0]) , tot_value_1_lpi_dfm_23_sg5},
      fsm_output[1]);
  assign mux_72_nl = MUX_s_1_2_2({mux1h_1_psp_sg3_sg1_mx0 , (tot_value_1_lpi_dfm_23_sg4[1])},
      fsm_output[1]);
  assign mux_73_nl = MUX_s_1_2_2({mux1h_1_psp_sg3_1 , (tot_value_1_lpi_dfm_23_sg4[0])},
      fsm_output[1]);
  assign mux_74_nl = MUX_s_1_2_2({mux1h_1_psp_sg2 , tot_value_1_lpi_dfm_23_sg3_sg1},
      fsm_output[1]);
  assign mux_75_nl = MUX_s_1_2_2({mux1h_1_psp_sg1 , tot_value_1_lpi_dfm_23_sg3_1},
      fsm_output[1]);
  assign mux_76_nl = MUX_s_1_2_2({mux1h_1_psp_1_mx0 , tot_value_1_lpi_dfm_23_sg2},
      fsm_output[1]);
  assign nl_z_out_1 = conv_u2u_8_9({(mux_64_nl) , (mux_70_nl) , (mux_71_nl) , (mux_72_nl)
      , (mux_73_nl) , (mux_74_nl) , (mux_75_nl) , (mux_76_nl)}) + conv_u2u_5_9(signext_5_4({mux_65_cse
      , 2'b1}));
  assign z_out_1 = nl_z_out_1[8:0];
  assign mux_66_nl = MUX_s_1_2_2({and_psp , mux1h_4_psp_sg6}, fsm_output[1]);
  assign mux_77_nl = MUX_s_1_2_2({(mux1h_1_psp_sg4[1]) , mux1h_4_psp_sg5}, fsm_output[1]);
  assign mux_78_nl = MUX_s_1_2_2({(mux1h_1_psp_sg4[0]) , (mux1h_4_psp_sg4[1])}, fsm_output[1]);
  assign mux_79_nl = MUX_s_1_2_2({mux1h_1_psp_sg3_sg1_mx0 , (mux1h_4_psp_sg4[0])},
      fsm_output[1]);
  assign mux_80_nl = MUX_s_1_2_2({mux1h_1_psp_sg3_1 , mux1h_4_psp_sg3_sg1}, fsm_output[1]);
  assign mux_81_nl = MUX_s_1_2_2({mux1h_1_psp_sg2 , mux1h_4_psp_sg3_1}, fsm_output[1]);
  assign mux_82_nl = MUX_s_1_2_2({mux1h_1_psp_sg1 , mux1h_4_psp_sg2}, fsm_output[1]);
  assign nl_z_out_2 = conv_u2u_7_8({(mux_66_nl) , (mux_77_nl) , (mux_78_nl) , (mux_79_nl)
      , (mux_80_nl) , (mux_81_nl) , (mux_82_nl)}) + 8'b11001;
  assign z_out_2 = nl_z_out_2[7:0];
  assign mux_67_nl = MUX_s_1_2_2({and_21_psp , (tot_value_1_lpi_dfm_26_sg2[7])},
      fsm_output[1]);
  assign mux_83_nl = MUX_s_1_2_2({mux1h_2_psp_sg5 , (tot_value_1_lpi_dfm_26_sg2[6])},
      fsm_output[1]);
  assign mux_84_nl = MUX_v_2_2_2({mux1h_2_psp_sg4 , (tot_value_1_lpi_dfm_26_sg2[5:4])},
      fsm_output[1]);
  assign mux_85_nl = MUX_s_1_2_2({mux1h_2_psp_sg3_sg1 , (tot_value_1_lpi_dfm_26_sg2[3])},
      fsm_output[1]);
  assign mux_86_nl = MUX_s_1_2_2({mux1h_2_psp_sg3_1 , (tot_value_1_lpi_dfm_26_sg2[2])},
      fsm_output[1]);
  assign mux_87_nl = MUX_s_1_2_2({mux1h_2_psp_sg2 , (tot_value_1_lpi_dfm_26_sg2[1])},
      fsm_output[1]);
  assign mux_88_nl = MUX_s_1_2_2({mux1h_2_psp_sg1 , (tot_value_1_lpi_dfm_26_sg2[0])},
      fsm_output[1]);
  assign mux_89_nl = MUX_s_1_2_2({mux1h_2_psp_1_mx0 , tot_value_1_lpi_dfm_26_sg1},
      fsm_output[1]);
  assign nl_z_out_3 = ({(mux_67_nl) , (mux_83_nl) , (mux_84_nl) , (mux_85_nl) , (mux_86_nl)
      , (mux_87_nl) , (mux_88_nl) , (mux_89_nl)}) + conv_u2u_5_9(signext_5_4({mux_65_cse
      , 2'b1}));
  assign z_out_3 = nl_z_out_3[8:0];

  function [0:0] readslicef_13_1_12;
    input [12:0] vector;
    reg [12:0] tmp;
  begin
    tmp = vector >> 12;
    readslicef_13_1_12 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_15_1_14;
    input [14:0] vector;
    reg [14:0] tmp;
  begin
    tmp = vector >> 14;
    readslicef_15_1_14 = tmp[0:0];
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [1:0] MUX_v_2_2_2;
    input [3:0] inputs;
    input [0:0] sel;
    reg [1:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[3:2];
      end
      1'b1 : begin
        result = inputs[1:0];
      end
      default : begin
        result = inputs[3:2];
      end
    endcase
    MUX_v_2_2_2 = result;
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [1:0] MUX1HOT_v_2_3_2;
    input [5:0] inputs;
    input [2:0] sel;
    reg [1:0] result;
    integer i;
  begin
    result = inputs[0+:2] & {2{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*2+:2] & {2{sel[i]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function [0:0] MUX1HOT_s_1_3_2;
    input [2:0] inputs;
    input [2:0] sel;
    reg [0:0] result;
    integer i;
  begin
    result = inputs[0+:1] & {1{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*1+:1] & {1{sel[i]}});
    MUX1HOT_s_1_3_2 = result;
  end
  endfunction


  function [0:0] MUX1HOT_s_1_4_2;
    input [3:0] inputs;
    input [3:0] sel;
    reg [0:0] result;
    integer i;
  begin
    result = inputs[0+:1] & {1{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*1+:1] & {1{sel[i]}});
    MUX1HOT_s_1_4_2 = result;
  end
  endfunction


  function [1:0] MUX1HOT_v_2_4_2;
    input [7:0] inputs;
    input [3:0] sel;
    reg [1:0] result;
    integer i;
  begin
    result = inputs[0+:2] & {2{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*2+:2] & {2{sel[i]}});
    MUX1HOT_v_2_4_2 = result;
  end
  endfunction


  function [7:0] MUX1HOT_v_8_4_2;
    input [31:0] inputs;
    input [3:0] sel;
    reg [7:0] result;
    integer i;
  begin
    result = inputs[0+:8] & {8{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*8+:8] & {8{sel[i]}});
    MUX1HOT_v_8_4_2 = result;
  end
  endfunction


  function [13:0] MUX_v_14_2_2;
    input [27:0] inputs;
    input [0:0] sel;
    reg [13:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[27:14];
      end
      1'b1 : begin
        result = inputs[13:0];
      end
      default : begin
        result = inputs[27:14];
      end
    endcase
    MUX_v_14_2_2 = result;
  end
  endfunction


  function [7:0] MUX_v_8_2_2;
    input [15:0] inputs;
    input [0:0] sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[15:8];
      end
      1'b1 : begin
        result = inputs[7:0];
      end
      default : begin
        result = inputs[15:8];
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction


  function [4:0] signext_5_4;
    input [3:0] vector;
  begin
    signext_5_4= {{1{vector[3]}}, vector};
  end
  endfunction


  function  [12:0] conv_u2u_12_13 ;
    input [11:0]  vector ;
  begin
    conv_u2u_12_13 = {1'b0, vector};
  end
  endfunction


  function  [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function  [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_5_9 ;
    input [4:0]  vector ;
  begin
    conv_u2u_5_9 = {{4{1'b0}}, vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    areaTotal
//  Generated from file(s):
//    2) $PROJECT_HOME/area_calc.c
// ------------------------------------------------------------------


module areaTotal (
  area0_rsc_z, area1_rsc_z, area2_rsc_z, area3_rsc_z, area4_rsc_z, area5_rsc_z, area6_rsc_z,
      area7_rsc_z, area8_rsc_z, area9_rsc_z, value_out_rsc_z, clk, en, arst_n
);
  input [13:0] area0_rsc_z;
  input [13:0] area1_rsc_z;
  input [13:0] area2_rsc_z;
  input [13:0] area3_rsc_z;
  input [13:0] area4_rsc_z;
  input [13:0] area5_rsc_z;
  input [13:0] area6_rsc_z;
  input [13:0] area7_rsc_z;
  input [13:0] area8_rsc_z;
  input [13:0] area9_rsc_z;
  output [13:0] value_out_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [13:0] area0_rsc_mgc_in_wire_d;
  wire [13:0] area1_rsc_mgc_in_wire_d;
  wire [13:0] area2_rsc_mgc_in_wire_d;
  wire [13:0] area3_rsc_mgc_in_wire_d;
  wire [13:0] area4_rsc_mgc_in_wire_d;
  wire [13:0] area5_rsc_mgc_in_wire_d;
  wire [13:0] area6_rsc_mgc_in_wire_d;
  wire [13:0] area7_rsc_mgc_in_wire_d;
  wire [13:0] area8_rsc_mgc_in_wire_d;
  wire [13:0] area9_rsc_mgc_in_wire_d;
  wire [13:0] value_out_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(14)) area0_rsc_mgc_in_wire (
      .d(area0_rsc_mgc_in_wire_d),
      .z(area0_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(14)) area1_rsc_mgc_in_wire (
      .d(area1_rsc_mgc_in_wire_d),
      .z(area1_rsc_z)
    );
  mgc_in_wire #(.rscid(3),
  .width(14)) area2_rsc_mgc_in_wire (
      .d(area2_rsc_mgc_in_wire_d),
      .z(area2_rsc_z)
    );
  mgc_in_wire #(.rscid(4),
  .width(14)) area3_rsc_mgc_in_wire (
      .d(area3_rsc_mgc_in_wire_d),
      .z(area3_rsc_z)
    );
  mgc_in_wire #(.rscid(5),
  .width(14)) area4_rsc_mgc_in_wire (
      .d(area4_rsc_mgc_in_wire_d),
      .z(area4_rsc_z)
    );
  mgc_in_wire #(.rscid(6),
  .width(14)) area5_rsc_mgc_in_wire (
      .d(area5_rsc_mgc_in_wire_d),
      .z(area5_rsc_z)
    );
  mgc_in_wire #(.rscid(7),
  .width(14)) area6_rsc_mgc_in_wire (
      .d(area6_rsc_mgc_in_wire_d),
      .z(area6_rsc_z)
    );
  mgc_in_wire #(.rscid(8),
  .width(14)) area7_rsc_mgc_in_wire (
      .d(area7_rsc_mgc_in_wire_d),
      .z(area7_rsc_z)
    );
  mgc_in_wire #(.rscid(9),
  .width(14)) area8_rsc_mgc_in_wire (
      .d(area8_rsc_mgc_in_wire_d),
      .z(area8_rsc_z)
    );
  mgc_in_wire #(.rscid(10),
  .width(14)) area9_rsc_mgc_in_wire (
      .d(area9_rsc_mgc_in_wire_d),
      .z(area9_rsc_z)
    );
  mgc_out_stdreg #(.rscid(11),
  .width(14)) value_out_rsc_mgc_out_stdreg (
      .d(value_out_rsc_mgc_out_stdreg_d),
      .z(value_out_rsc_z)
    );
  areaTotal_core areaTotal_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .area0_rsc_mgc_in_wire_d(area0_rsc_mgc_in_wire_d),
      .area1_rsc_mgc_in_wire_d(area1_rsc_mgc_in_wire_d),
      .area2_rsc_mgc_in_wire_d(area2_rsc_mgc_in_wire_d),
      .area3_rsc_mgc_in_wire_d(area3_rsc_mgc_in_wire_d),
      .area4_rsc_mgc_in_wire_d(area4_rsc_mgc_in_wire_d),
      .area5_rsc_mgc_in_wire_d(area5_rsc_mgc_in_wire_d),
      .area6_rsc_mgc_in_wire_d(area6_rsc_mgc_in_wire_d),
      .area7_rsc_mgc_in_wire_d(area7_rsc_mgc_in_wire_d),
      .area8_rsc_mgc_in_wire_d(area8_rsc_mgc_in_wire_d),
      .area9_rsc_mgc_in_wire_d(area9_rsc_mgc_in_wire_d),
      .value_out_rsc_mgc_out_stdreg_d(value_out_rsc_mgc_out_stdreg_d)
    );
endmodule



