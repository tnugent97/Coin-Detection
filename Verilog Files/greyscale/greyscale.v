// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   ml7715@EEWS104A-021
//  Generated date: Mon Apr 25 13:08:02 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    greyscale_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module greyscale_core_fsm (
  clk, en, arst_n, fsm_output, st_FRAME_1_tr0
);
  input clk;
  input en;
  input arst_n;
  output [2:0] fsm_output;
  reg [2:0] fsm_output;
  input st_FRAME_1_tr0;


  // FSM State Type Declaration for greyscale_core_fsm_1
  parameter
    st_main = 2'd0,
    st_FRAME = 2'd1,
    st_FRAME_1 = 2'd2,
    state_x = 2'b00;

  reg [1:0] state_var;
  reg [1:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : greyscale_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 3'b1;
        state_var_NS = st_FRAME;
      end
      st_FRAME : begin
        fsm_output = 3'b10;
        state_var_NS = st_FRAME_1;
      end
      st_FRAME_1 : begin
        fsm_output = 3'b100;
        if ( st_FRAME_1_tr0 ) begin
          state_var_NS = st_main;
        end
        else begin
          state_var_NS = st_FRAME;
        end
      end
      default : begin
        fsm_output = 3'b000;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      state_var <= st_main;
    end
    else if ( en ) begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    greyscale_core
// ------------------------------------------------------------------


module greyscale_core (
  clk, en, arst_n, vin_rsc_mgc_in_wire_d, vout_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input arst_n;
  input [29:0] vin_rsc_mgc_in_wire_d;
  output [29:0] vout_rsc_mgc_out_stdreg_d;
  reg [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire [2:0] fsm_output;
  reg [18:0] FRAME_p_1_sva;
  reg [18:0] FRAME_p_1_sva_1;
  reg FRAME_slc_itm;
  wire [18:0] FRAME_p_1_sva_2;
  wire [19:0] nl_FRAME_p_1_sva_2;
  wire [10:0] FRAME_acc_7_psp_1_sva;
  wire [11:0] nl_FRAME_acc_7_psp_1_sva;
  wire [11:0] FRAME_acc_3_psp_sva;
  wire [12:0] nl_FRAME_acc_3_psp_sva;
  wire [2:0] acc_imod_1_sva;
  wire [3:0] nl_acc_imod_1_sva;
  wire [3:0] acc_1_psp_sva;
  wire [4:0] nl_acc_1_psp_sva;


  // Interconnect Declarations for Component Instantiations 
  wire [0:0] nl_greyscale_core_fsm_inst_st_FRAME_1_tr0;
  assign nl_greyscale_core_fsm_inst_st_FRAME_1_tr0 = ~ FRAME_slc_itm;
  greyscale_core_fsm greyscale_core_fsm_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .fsm_output(fsm_output),
      .st_FRAME_1_tr0(nl_greyscale_core_fsm_inst_st_FRAME_1_tr0)
    );
  assign nl_FRAME_p_1_sva_2 = FRAME_p_1_sva + 19'b1;
  assign FRAME_p_1_sva_2 = nl_FRAME_p_1_sva_2[18:0];
  assign nl_FRAME_acc_7_psp_1_sva = conv_u2s_10_11({(FRAME_acc_3_psp_sva[11]) , (conv_u2u_8_9({(FRAME_acc_3_psp_sva[11])
      , 1'b0 , (FRAME_acc_3_psp_sva[11]) , 1'b0 , (FRAME_acc_3_psp_sva[11]) , 1'b0
      , (signext_2_1(FRAME_acc_3_psp_sva[7]))}) + conv_u2u_8_9(readslicef_9_8_1((({(FRAME_acc_3_psp_sva[9])
      , 1'b0 , (FRAME_acc_3_psp_sva[9]) , 1'b0 , (FRAME_acc_3_psp_sva[9]) , 1'b0
      , (signext_2_1(FRAME_acc_3_psp_sva[5])) , 1'b1}) + conv_u2u_8_9({(readslicef_8_7_1((conv_u2u_7_8({(FRAME_acc_3_psp_sva[7])
      , 1'b0 , (FRAME_acc_3_psp_sva[5]) , 1'b0 , (signext_2_1(FRAME_acc_3_psp_sva[9]))
      , 1'b1}) + conv_u2u_6_8({(FRAME_acc_3_psp_sva[6]) , 1'b0 , (FRAME_acc_3_psp_sva[6])
      , 1'b0 , (FRAME_acc_3_psp_sva[6]) , (acc_imod_1_sva[1])})))) , (~ (readslicef_3_1_2((({1'b1
      , (acc_imod_1_sva[0]) , 1'b1}) + conv_u2s_2_3({(~ (acc_imod_1_sva[1])) , (~
      (acc_imod_1_sva[2]))})))))})))))}) + conv_s2s_10_11(conv_u2s_9_10({(FRAME_acc_3_psp_sva[10])
      , 1'b0 , (FRAME_acc_3_psp_sva[10]) , 1'b0 , (FRAME_acc_3_psp_sva[10]) , 1'b0
      , (FRAME_acc_3_psp_sva[10]) , 1'b0 , (FRAME_acc_3_psp_sva[10])}) + conv_s2s_8_10(readslicef_9_8_1((conv_u2s_8_9({(FRAME_acc_3_psp_sva[8])
      , 1'b0 , (FRAME_acc_3_psp_sva[8]) , 1'b0 , (FRAME_acc_3_psp_sva[8]) , 1'b0
      , (FRAME_acc_3_psp_sva[8]) , 1'b1}) + conv_s2s_7_9({(readslicef_7_6_1((conv_s2s_5_7({(readslicef_5_4_1((conv_s2s_4_5({(readslicef_4_3_1((conv_u2s_3_4({(FRAME_acc_3_psp_sva[3])
      , (FRAME_acc_3_psp_sva[1]) , 1'b1}) + conv_s2s_3_4({1'b1 , (FRAME_acc_3_psp_sva[2])
      , (FRAME_acc_3_psp_sva[3])})))) , 1'b1}) + conv_s2s_3_5({(acc_1_psp_sva[3:2])
      , (FRAME_acc_3_psp_sva[4])})))) , 1'b1}) + conv_u2s_5_7({(FRAME_acc_3_psp_sva[7])
      , (FRAME_acc_3_psp_sva[4]) , (signext_2_1(FRAME_acc_3_psp_sva[11])) , (acc_1_psp_sva[1])}))))
      , (~ (acc_imod_1_sva[2]))})))));
  assign FRAME_acc_7_psp_1_sva = nl_FRAME_acc_7_psp_1_sva[10:0];
  assign nl_FRAME_acc_3_psp_sva = conv_u2u_11_12(conv_u2u_10_11(vin_rsc_mgc_in_wire_d[19:10])
      + conv_u2u_10_11(vin_rsc_mgc_in_wire_d[29:20])) + conv_u2u_10_12(vin_rsc_mgc_in_wire_d[9:0]);
  assign FRAME_acc_3_psp_sva = nl_FRAME_acc_3_psp_sva[11:0];
  assign nl_acc_imod_1_sva = conv_s2s_2_3(conv_s2s_1_2(acc_1_psp_sva[1]) + conv_u2s_1_2(acc_1_psp_sva[0]))
      + conv_s2s_2_3(acc_1_psp_sva[3:2]);
  assign acc_imod_1_sva = nl_acc_imod_1_sva[2:0];
  assign nl_acc_1_psp_sva = (readslicef_5_4_1((conv_u2u_4_5({(readslicef_4_3_1((conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
      (FRAME_acc_3_psp_sva[3])) , 1'b1}) + conv_u2u_2_3({(FRAME_acc_3_psp_sva[4])
      , (FRAME_acc_3_psp_sva[8])})))) , 1'b1}) + conv_u2u_3_4({(readslicef_3_2_1((conv_u2u_2_3({(~
      (FRAME_acc_3_psp_sva[5])) , 1'b1}) + conv_u2u_2_3({(FRAME_acc_3_psp_sva[6])
      , (~ (FRAME_acc_3_psp_sva[7]))})))) , (FRAME_acc_3_psp_sva[10])})))) , 1'b1})
      + conv_u2u_3_5({(readslicef_3_2_1((conv_u2u_2_3({(~ (FRAME_acc_3_psp_sva[1]))
      , 1'b1}) + conv_u2u_2_3({(FRAME_acc_3_psp_sva[2]) , (~ (FRAME_acc_3_psp_sva[9]))}))))
      , (~ (FRAME_acc_3_psp_sva[11]))})))) + ({3'b101 , (FRAME_acc_3_psp_sva[0])});
  assign acc_1_psp_sva = nl_acc_1_psp_sva[3:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      FRAME_p_1_sva <= 19'b0;
      vout_rsc_mgc_out_stdreg_d <= 30'b0;
      FRAME_slc_itm <= 1'b0;
      FRAME_p_1_sva_1 <= 19'b0;
    end
    else begin
      if ( en ) begin
        FRAME_p_1_sva <= FRAME_p_1_sva_1 & (signext_19_1(fsm_output[2]));
        vout_rsc_mgc_out_stdreg_d <= MUX_v_30_2_2({vout_rsc_mgc_out_stdreg_d , ({((FRAME_acc_7_psp_1_sva[9:0])
            | ({9'b0 , (FRAME_acc_7_psp_1_sva[10])})) , (FRAME_acc_7_psp_1_sva[9:6])
            , ((FRAME_acc_7_psp_1_sva[5:0]) | ({5'b0 , (FRAME_acc_7_psp_1_sva[10])}))
            , (FRAME_acc_7_psp_1_sva[9:0])})}, fsm_output[1]);
        FRAME_slc_itm <= readslicef_8_1_7((conv_u2s_7_8(FRAME_p_1_sva_2[18:12]) +
            8'b10110101));
        FRAME_p_1_sva_1 <= FRAME_p_1_sva_2;
      end
    end
  end

  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [7:0] readslicef_9_8_1;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_9_8_1 = tmp[7:0];
  end
  endfunction


  function [6:0] readslicef_8_7_1;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_8_7_1 = tmp[6:0];
  end
  endfunction


  function [0:0] readslicef_3_1_2;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 2;
    readslicef_3_1_2 = tmp[0:0];
  end
  endfunction


  function [5:0] readslicef_7_6_1;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_7_6_1 = tmp[5:0];
  end
  endfunction


  function [3:0] readslicef_5_4_1;
    input [4:0] vector;
    reg [4:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_5_4_1 = tmp[3:0];
  end
  endfunction


  function [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function [1:0] readslicef_3_2_1;
    input [2:0] vector;
    reg [2:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_3_2_1 = tmp[1:0];
  end
  endfunction


  function [18:0] signext_19_1;
    input [0:0] vector;
  begin
    signext_19_1= {{18{vector[0]}}, vector};
  end
  endfunction


  function [29:0] MUX_v_30_2_2;
    input [59:0] inputs;
    input [0:0] sel;
    reg [29:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[59:30];
      end
      1'b1 : begin
        result = inputs[29:0];
      end
      default : begin
        result = inputs[59:30];
      end
    endcase
    MUX_v_30_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function signed [10:0] conv_u2s_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2s_10_11 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_6_8 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_8 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [2:0] conv_u2s_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2s_2_3 = {1'b0, vector};
  end
  endfunction


  function signed [10:0] conv_s2s_10_11 ;
    input signed [9:0]  vector ;
  begin
    conv_s2s_10_11 = {vector[9], vector};
  end
  endfunction


  function signed [9:0] conv_u2s_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2s_9_10 = {1'b0, vector};
  end
  endfunction


  function signed [9:0] conv_s2s_8_10 ;
    input signed [7:0]  vector ;
  begin
    conv_s2s_8_10 = {{2{vector[7]}}, vector};
  end
  endfunction


  function signed [8:0] conv_u2s_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2s_8_9 = {1'b0, vector};
  end
  endfunction


  function signed [8:0] conv_s2s_7_9 ;
    input signed [6:0]  vector ;
  begin
    conv_s2s_7_9 = {{2{vector[6]}}, vector};
  end
  endfunction


  function signed [6:0] conv_s2s_5_7 ;
    input signed [4:0]  vector ;
  begin
    conv_s2s_5_7 = {{2{vector[4]}}, vector};
  end
  endfunction


  function signed [4:0] conv_s2s_4_5 ;
    input signed [3:0]  vector ;
  begin
    conv_s2s_4_5 = {vector[3], vector};
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction


  function signed [3:0] conv_s2s_3_4 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_4 = {vector[2], vector};
  end
  endfunction


  function signed [4:0] conv_s2s_3_5 ;
    input signed [2:0]  vector ;
  begin
    conv_s2s_3_5 = {{2{vector[2]}}, vector};
  end
  endfunction


  function signed [6:0] conv_u2s_5_7 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_7 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function  [10:0] conv_u2u_10_11 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_11 = {1'b0, vector};
  end
  endfunction


  function  [11:0] conv_u2u_10_12 ;
    input [9:0]  vector ;
  begin
    conv_u2u_10_12 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [2:0] conv_s2s_2_3 ;
    input signed [1:0]  vector ;
  begin
    conv_s2s_2_3 = {vector[1], vector};
  end
  endfunction


  function signed [1:0] conv_s2s_1_2 ;
    input signed [0:0]  vector ;
  begin
    conv_s2s_1_2 = {vector[0], vector};
  end
  endfunction


  function signed [1:0] conv_u2s_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_2 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    greyscale
//  Generated from file(s):
//    2) $PROJECT_HOME/Greyscale_source/greyscale.c
// ------------------------------------------------------------------


module greyscale (
  vin_rsc_z, vout_rsc_z, clk, en, arst_n
);
  input [29:0] vin_rsc_z;
  output [29:0] vout_rsc_z;
  input clk;
  input en;
  input arst_n;


  // Interconnect Declarations
  wire [29:0] vin_rsc_mgc_in_wire_d;
  wire [29:0] vout_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(30)) vin_rsc_mgc_in_wire (
      .d(vin_rsc_mgc_in_wire_d),
      .z(vin_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(30)) vout_rsc_mgc_out_stdreg (
      .d(vout_rsc_mgc_out_stdreg_d),
      .z(vout_rsc_z)
    );
  greyscale_core greyscale_core_inst (
      .clk(clk),
      .en(en),
      .arst_n(arst_n),
      .vin_rsc_mgc_in_wire_d(vin_rsc_mgc_in_wire_d),
      .vout_rsc_mgc_out_stdreg_d(vout_rsc_mgc_out_stdreg_d)
    );
endmodule



